using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using Peak.UnityGameFramework.Scripts.Common;
using Peak.UnityGameFramework.Scripts.Settings.Autogenerated;
using System;
using Peak.UnityGameFramework.Scripts.ScenesLogic;
using UnityEngine.UI;

namespace Peak.UnityGameFramework.Scripts
{
    public class HUDController : MonoBehaviour
    {
        [SerializeField] private Image backgroundImage;
        [SerializeField] private TextMeshProUGUI timerLabel;
        [SerializeField] private TextMeshProUGUI roundLabel;
        [SerializeField] private TextMeshProUGUI scoreLabel;
        [SerializeField] private SoundSettingsKey countDownSound;

        private Action timerFinishedHandler;

        private bool isPaused = true;

        private float runningTime = 0;
        private int activeSecond = int.MaxValue;

        private int currentRound;
        private int totalRounds;

        private int runningScore = 0;

        public void SetupHud(int rounds = 0, int time = 0, Action timerFinishedHandler = null)
        {
            print($"SETUP HUD ({this.gameObject})");
            this.timerFinishedHandler = timerFinishedHandler;
            if (rounds > 0)
            {
                totalRounds = rounds;
            }
            if (time > 0)
            {
                runningTime = time;
            }
            roundLabel.gameObject.SetActive(rounds > 0);
            timerLabel.gameObject.SetActive(time > 0);
            currentRound = 0;
            runningScore = 0;
            UpdateScoreLabel(0);
        }

        public void UpdateHudColour(Color newColour)
        {
            backgroundImage.color = newColour;
        }

        public void PauseHUD()
        {
            isPaused = true;
        }

        public void ResumeHUD()
        {
            isPaused = false;
        }

        public void IncrementRound(int score)
        {
            currentRound += 1;
            UpdateRoundCounter();
            UpdateScoreLabel(score);
        }

        private void UpdateRoundCounter()
        {
            if (roundLabel.gameObject.activeSelf)
            {
                roundLabel.text = $"<color=#FACB00><b>{currentRound}</b></color>/{totalRounds}";
            }
        }

        private void UpdateTimeCounter(int minutes, int seconds)
        {
            if (timerLabel.gameObject.activeSelf)
            {
                timerLabel.text = $"{minutes:00}:{seconds:00}";
            }
        }

        private void UpdateScoreLabel(int score)
        {
            runningScore += score;
            scoreLabel.text = $"{runningScore}";
            print($"UPDATE SCORE: {score} - running: {runningScore} label: {scoreLabel.text}");
        }

        private void Update()
        {
            if (!isPaused && timerLabel.gameObject.activeSelf)
            {
                int minutes = (int)(runningTime / 60);
                int seconds = (int)(runningTime % 60);
                if (minutes == 0 && seconds < 5 && activeSecond != seconds)
                {
                    activeSecond = seconds;
                    LocalisationController.Instance.PlayAudioClip(countDownSound);
                }
                runningTime -= Time.deltaTime;

                if (runningTime <= 0)
                {
                    isPaused = true;
                    runningTime = 0;
                    UpdateTimeCounter(0, 0);
                    print("TIMER COMPLETE");
                    timerFinishedHandler?.Invoke();
                }
                UpdateTimeCounter(minutes, seconds);
            }
        }

        #region - Button handlers

        public void PauseButtonHandler()
        {
            SceneActivationBehaviour<RootGameSceneActivator>.Instance.PauseButtonPressed();
        }

        public void HelpButtonHandler()
        {
            SceneActivationBehaviour<RootGameSceneActivator>.Instance.HelpButtonPressed();
        }
        #endregion
    }
}
