<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ output extension=".cs" #>
/////////////////////////////////////////////////////////
/////////DO NOT MODIFY THIS AUTOGENERATED FILE///////////
///////////////////////////////////////////////////////// 
<# 
    // This code generates constants for Localisation Controller usage
#>
using System;
using System.Collections.Generic;

// ReSharper disable InconsistentNaming
namespace Peak.GameName.Scripts.Autogenerated
{
<#
    string currentDirectoryName = this.Host.ResolvePath("");
    int endIndex = currentDirectoryName.IndexOf("Assets", StringComparison.Ordinal) + "Assets".Length;
    string sceneDirectoryName = currentDirectoryName.Substring(0, endIndex);
    sceneDirectoryName = Path.Combine(sceneDirectoryName, 
        "GameName", "Scenes");
    
    if (!Directory.Exists(sceneDirectoryName))
    {
        return "// Cannot find a scene directory";
    }

    var records = Directory
    .GetFileSystemEntries(sceneDirectoryName, "*.unity", SearchOption.AllDirectories)
    .Select(path => Path.GetFileNameWithoutExtension(path))
    .Select(name => new { Name = name, Id = Regex.Replace(name, @"[^\w\d]", "_") })
    .ToArray();

#>
    [Serializable]
    public enum GameWindow
    {
        NoWindow = 0,
<#
    for (int index = 0; index < records.Length; index++)
    {
        string itemName = records[index].Id;
        int itemValue = index + 1;
#>
        <#=itemName#> = <#=itemValue#>,
<#
    }
#>
    }

    public static class GameWindowNames
    {
        public static readonly Dictionary<GameWindow, string> Mapping = new Dictionary<GameWindow, string>
        {
             { GameWindow.NoWindow, string.Empty },
<#
  
    foreach (var item in records)
    {
#>
             { GameWindow.<#=item.Id#> , "<#=item.Name#>" },
<#
    }
#>
        };
    }
}