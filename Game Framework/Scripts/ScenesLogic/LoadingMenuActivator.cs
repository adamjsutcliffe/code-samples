using System.Collections;
using Peak.UnityGameFramework.Scripts.Autogenerated;
using UnityEngine;
using UnityEngine.UI;

namespace Peak.UnityGameFramework.Scripts.ScenesLogic
{
    public sealed class LoadingMenuActivator : SceneActivationBehaviour<LoadingMenuActivator>
    {
        /// <summary>
        /// Loading image, e.g. a bar you want to fill as game loads.
        /// </summary>
        [SerializeField]
        private Image progressImage;

#if UNITY_EDITOR
        [SerializeField]
        private bool debugOptionToAllowAppToRunInBackground;
#endif

        // Use this for initialization
        private void Start()
        {
#if UNITY_EDITOR
            Application.runInBackground = debugOptionToAllowAppToRunInBackground;
#else
            Application.runInBackground = false;
#endif
        }

        public override void Initialize()
        {
            StartCoroutine(LoadScenesAsyncAll());
        }

        public override void Show(bool animated = false)
        {
            base.Show(animated);
        }

        public override void Hide()
        {
            base.Hide();
        }

        private IEnumerator LoadScenesAsyncAll()
        {
            // wait for quality settings
            yield return new WaitForEndOfFrame();

            GameWindow[] scenesToLoadOnStartUp =
            {
                GameWindow.OverlayUIScene,
                GameWindow.GlobalLogic,
                GameWindow.DebugScene,
                //GameWindow.RootGameScene,
                //GameWindow.OverlayUIScene,
                //GameWindow.PauseMenu,
                //GameWindow.TutorialPopup
                //GameWindow.SPEGame,
                GameWindow.WPAGame,
            };

            print($"[UNITY] - start load - {Time.time}");
            InterfaceController.Instance.LoadWithProgress(scenesToLoadOnStartUp, () => StartCoroutine(NavigationSceneLoaded()), progress => progressImage.fillAmount = 1f * progress / scenesToLoadOnStartUp.Length);
        }

        private IEnumerator NavigationSceneLoaded()
        {
            //InterfaceController.Instance.Show(GameWindow.RootGameScene, true);

            print($"[UNITY] - Load complete 1 - show scenes - {Time.time}");
            InterfaceController.Instance.Show(GameWindow.GlobalLogic);
            InterfaceController.Instance.Show(GameWindow.OverlayUIScene);
            InterfaceController.Instance.Show(GameWindow.DebugScene);
            print($"[UNITY] - Load complete 2 - show scenes - {Time.time}");
            SceneActivationBehaviour<RootGameSceneActivator>.Instance.cubeScript.FrameworkLoaded();
            yield return new WaitForSeconds(0.25f);

            // Hides loading menu scene
            InterfaceController.Instance.Unload(GameWindow.LoadingMenu);
        }
    }
}


