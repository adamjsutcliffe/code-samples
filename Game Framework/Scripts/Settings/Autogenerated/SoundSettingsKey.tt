<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ output extension=".cs" #>
/////////////////////////////////////////////////////////
/////////DO NOT MODIFY THIS AUTOGENERATED FILE///////////
///////////////////////////////////////////////////////// 
<# 
    // This code generates constants for Localisation Controller usage
#>
using System;
using System.Collections.Generic;

namespace Peak.UnityGameFramework.Scripts.Settings.Autogenerated
{
<#
    string currentDirectoryName = this.Host.ResolvePath("");
    int endIndex = currentDirectoryName.IndexOf("Assets", StringComparison.Ordinal) + "Assets".Length;
    string soundDirectoryName = currentDirectoryName.Substring(0, endIndex);
    soundDirectoryName = Path.Combine(soundDirectoryName, 
        "UnityGameFramework", "Settings", "Localisations", "SoundSettings.asset");
    
    if (!File.Exists(soundDirectoryName))
    {
#>
        // Cannot find a settings file: <#=soundDirectoryName#>
<#
        return "";
    }
    
    Func<string,string> capitalise = CultureInfo.CurrentCulture.TextInfo.ToTitleCase;

    var records = File.ReadAllText(soundDirectoryName)
        .Split('\n', '\r')
        .Where(line => line.Contains("key:") || line.Contains("Key:"))
        .Select(line => line.Split(':').Last().Trim())
        .Select(key => new { Key = key, RawParts = key.Split('_') })
        .Select(obj => new { obj.Key, NameParts = obj.RawParts.Select(capitalise) })
        .Select(obj => new { obj.Key, FormatedName = string.Join("", obj.NameParts) })
        .ToArray();
#>
    [Serializable]
    public enum SoundSettingsKey
    {
        NotSet = 0,
<#
    for (int index = 0; index < records.Length; index++)
    {
        string itemName = records[index].FormatedName;
        int itemValue = index + 1;
        

#>
        <#=itemName#> = <#=itemValue#>,
<#
    }
#>
    }

    public static class SoundSettingsValue
    {
        public static readonly Dictionary<SoundSettingsKey, string> Mapping = new Dictionary<SoundSettingsKey, string>
        {
             { SoundSettingsKey.NotSet, string.Empty },
<#
  
    foreach (var obj in records)
    {
#>
             { SoundSettingsKey.<#=obj.FormatedName#> , "<#=obj.Key#>" },
<#
    }
#>
        };
    }
}