using System.Collections;
using System.Collections.Generic;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using Peak.QuixelLogic.Scripts.Settings;
using Peak.QuixelLogic.Scripts.Game.Gameplay;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Autogenerated;
using System.Linq;
using System;
using System.Text;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Game.CollectionScripts;
using System.Globalization;
using Fabric.Crashlytics;

namespace Peak.QuixelLogic.Scripts.Game
{
    public sealed class GameController : MonoBehaviour
    {
        public GlobalSettings GlobalSettings => globalSettings;
        [SerializeField]
        private GlobalSettings globalSettings;

        [SerializeField]
        private ServerController serverController;

        [SerializeField]
        private AdsController adsController;

        [SerializeField]
        private FtueController ftueController;

        [SerializeField]
        private NotificationController notificationController;

        [SerializeField]
        private AnalyticsController analyticsController;

        [SerializeField]
        private SessionScript sessionScript;

        [SerializeField]
        private ReviewRequestScript ReviewRequestScript;

        public Player Player => player;
        private Player player;

        public int GameSessionCounter { get; set; }

        public bool DisplayDebugText { get; set; }

        private bool debugMode;

        private void Awake()
        {
#if CHEATS
            debugMode = true;
#else
            debugMode = false;
#endif
        }

        public void Initialise()
        {
            DebugLog("[TEST] initialise game controller");

            // load and setup references
            serverController.RunMigrations(globalSettings);

            player = serverController.LoadPlayerData(globalSettings);

            // Register user - if new, send device data
            analyticsController.RegisterUser(player);

            adsController.Initialize();

            if (player.IsNew)
            {
                analyticsController.SendDeviceData();
                player.IsNew = false;
                serverController.PersistPlayerProgress(player);
            }

            sessionScript.SessionStarted += GameStartedHandler;
            sessionScript.SessionPaused += GamePausedHandler;
            sessionScript.SessionResumed += GameResumedHandler;
            sessionScript.SessionRestarted += GameRestartedHandler;
            sessionScript.SessionSolved += GameSolvedHandler;
            sessionScript.SessionFinished += GameFinishedHandler;

            player.ActiveGameSessions++;

            TryAssignABTests();

            serverController.PersistPlayerProgress(player);

            SceneActivationBehaviour<MainMenuActivator>.Instance.SetCurrentProgressOnMainMenu(player, globalSettings);
            SceneActivationBehaviour<UIFilmCounterActivator>.Instance.UpdateFilmOnAppRestore();
        }

        private void TryAssignABTests()
        {
            string ABtest_ID = InterfaceController.Instance.HandleRemoteSettings.AB_IDString;
            DebugLog($"[TEST] assign AB test function - ab test string: {ABtest_ID}");

            if (ABtest_ID == null)
            {
                DebugLog($"[TEST] AB test string is null: {ABtest_ID}");
                return;
            }

            if (!ABtest_ID.Equals(Constants.ABTesting.DefaultAB_IDstring)) // AB testing is in effect
            {
                DebugLog("[TEST] AB testing string (that was retrieved) is NOT default (i.e. there is a valid string key)");
                SetCustomABTestKeyValues();
            }

            if (!player.ABTestKeys.Any(x => x == ABtest_ID)) // add AB test ID to player info & send analytic if not sent before
            {
                DebugLog("[TEST] player AB keys do not match AB test key - send analytics");
                player.ABTestKeys.Add(ABtest_ID);
                analyticsController.SendABTestUserID(player.Guid, ABtest_ID);
            }
        }

        private void SetCustomABTestKeyValues() // this method needs to be configured per A/B test
        {
            globalSettings.Film.MaxFilmCount = InterfaceController.Instance.HandleRemoteSettings.VariantFilmValue;
        }

        public void TryShowNotificationPopup(string popupTitle, string popupBody)
        {
            if (ftueController.ShouldShowNotificationPopup)
            {
                // show notification pop up
                SceneActivationBehaviour<PopUpNotificationsActivator>.Instance.ShowNotificationPopup(popupTitle, popupBody, (bool notificationsAccepted) =>
                {
                    // TODO: analytic for accepting or not accepting notifications

                    ScheduleOneDayNotification();

                    ftueController.NotificationsAccepted();
                    if (notificationsAccepted)
                    {
                        StartCoroutine(notificationController.AskForPermissionsCoroutine());
                    }
                });
            }
            else return;
        }

        public void ScheduleOneDayNotification() // called by accepting the notification pop up (iOS)
        {
            DebugLog($"[NOTIFICATION] schedule one day notification");
            string dateToday = DateTime.Now.AddSeconds(Constants.Notifications.OneDayInSeconds).ToString("yyyyMMddHHmmss", CultureInfo.CurrentCulture);
            PlayerPrefs.SetString(Constants.Notifications.DayNotificationScheduleTime, dateToday);
            notificationController.ScheduleOneDayNotification();
        }

        public bool IsInterstitialTooSoon()
        {
            return adsController.IsInterstitialTooSoon();
        }

        // functions for analytics
        private void GameStartedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                analyticsController.SendGameData(GameSourceType.Start, gameData);
            }
        }

        private void GamePausedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                analyticsController.SendGameData(GameSourceType.Pause, gameData);
            }
        }

        private void GameResumedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                analyticsController.SendGameData(GameSourceType.Resume, gameData);
            }
        }

        private void GameRestartedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                analyticsController.SendGameData(GameSourceType.Restart, gameData);
            }
        }

        private void GameSolvedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                analyticsController.SendGameData(GameSourceType.Finish, gameData);

                if (!gameData.Replay && !gameData.Ruleset.IsFtue && !gameData.Ruleset.IsGold)
                {
                    FilmSpentHandler();
                }
            }

            GameSessionCounter++;
            DebugLog("[ADS] game session counter: " + GameSessionCounter);
        }

        private void GameFinishedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                analyticsController.SendGameData(GameSourceType.Quit, gameData);
            }
        }

        // called immediately when puzzle is solved
        public void RecordLevelCompletion(MainGameData gameData)
        {
            if (!gameData.Replay)
            {
                player.MainPuzzleIndex++;
                LevelGroupingSettings levelGroupingSettings = globalSettings.levelGroupingSettings[player.GroupIndex];

                int nextLevelID = player.CurrentLevelInGroupIndex + 1;

                if (levelGroupingSettings.Levels.ElementAtOrDefault(nextLevelID) == null)
                {
                    // collection complete - move group on
                    if (player.GroupIndex < globalSettings.levelGroupingSettings.Length - 1)
                    {
                        if (levelGroupingSettings.GoldLevels.Count > 0)
                        {
                            player.MainPuzzleIndex += levelGroupingSettings.GoldLevels.Count;
                        }

                        player.GroupIndex++;
                        player.CurrentLevelInGroupIndex = 0;
                        player.NewLocation = true;
                        globalSettings.levelGroupingSettings[player.GroupIndex].Locked = false;

                        SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowCollectionEvent(CollectionScreenActivator.CollectionEvent.NewLocationUnlocked, player);

                        InterfaceController.Instance.Show(GameWindow.PostGameScene);
                        SceneActivationBehaviour<PostGameSceneActivator>.Instance.ShowBoardPostGame(gameData, nextCollectionUnlocked: true);
                    }
                    else
                    {
                        player.GameComplete = true;
                        player.MainPuzzleIndex += levelGroupingSettings.GoldLevels.Count;

                        SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowCollectionEvent(CollectionScreenActivator.CollectionEvent.GameComplete);

                        InterfaceController.Instance.Show(GameWindow.PostGameScene);
                        SceneActivationBehaviour<PostGameSceneActivator>.Instance.ShowBoardPostGame(gameData);
                    }

                }
                else
                {
                    player.CurrentLevelInGroupIndex++;

                    if (player.GroupIndex > 0)
                    {
                        SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowCollectionEvent(CollectionScreenActivator.CollectionEvent.NextLevelInOrderComplete);
                    }

                    InterfaceController.Instance.Show(GameWindow.PostGameScene);
                    SceneActivationBehaviour<PostGameSceneActivator>.Instance.ShowBoardPostGame(gameData);
                }
            }
            else
            {
                InterfaceController.Instance.Show(GameWindow.PostGameScene);
                SceneActivationBehaviour<PostGameSceneActivator>.Instance.ShowBoardPostGame(gameData);
            }

            PlayerProgressStringBuilder.Instance.RemakePlayerProgressString(gameData);

            ReviewRequestScript.TryRequestReview(player, gameData.StarScore.Equals(3));

        }

        public void RecordGoldLevelCompletion(MainGameData gameData)
        {
            InterfaceController.Instance.Show(GameWindow.PostGameScene);
            SceneActivationBehaviour<PostGameSceneActivator>.Instance.ShowBoardPostGame(gameData);

            if (!gameData.Replay)
            {
                SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowCollectionEvent(CollectionScreenActivator.CollectionEvent.GoldLevelComplete);
            }

            PlayerProgressStringBuilder.Instance.RemakePlayerGoldString(gameData.Ruleset.UniqueID, GoldLevelCardScript.GoldCardState.Complete, gameData);
        }

        private void ShowAndHideScenesForGame()
        {
            InterfaceController.Instance.Show(GameWindow.BonusBarUI);
            InterfaceController.Instance.Show(GameWindow.ToolbarUI);
            InterfaceController.Instance.Show(GameWindow.TopBarUI);

            InterfaceController.Instance.Hide(GameWindow.MainMenu);
            InterfaceController.Instance.Hide(GameWindow.UILevelProgressCounter);
            InterfaceController.Instance.Hide(GameWindow.BoardBlur);
            InterfaceController.Instance.Hide(GameWindow.BoardMenu);
        }

        public IEnumerator StartGameHandler(RuleSettings selectedRuleset, bool isReplay = false)
        {
            Crashlytics.Log($"Start game handler, {selectedRuleset.PuzzleNameKey}");

            if (selectedRuleset != null)
            {
                if (selectedRuleset.IsFtue)
                {
                    SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ScreenWipeTransition(new List<GameWindow> { GameWindow.CollectionScreen }, new List<GameWindow> { GameWindow.BoardUI });
                    yield return new WaitForSeconds(0.5f);
                    ShowAndHideScenesForGame();

                    if (player.FtuePassed)
                    {
                        sessionScript.CreateGameAndStart(player, selectedRuleset, isReplay);
                    }
                    else
                    {
                        ftueController.StartFtueGame(player, selectedRuleset);
                    }
                }
                else
                {
                    if (selectedRuleset.IsGold || isReplay)
                    {
                        SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ScreenWipeTransition(new List<GameWindow> { GameWindow.CollectionScreen }, new List<GameWindow> { GameWindow.BoardUI });
                        yield return new WaitForSeconds(0.5f);
                        ShowAndHideScenesForGame();

                        sessionScript.CreateGameAndStart(player, selectedRuleset, isReplay);
                        StartCoroutine(SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ShowTargetScreen());

                        yield break;
                    }
                    else
                    {
                        if (player.Film > 0)
                        {
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ScreenWipeTransition(new List<GameWindow> { GameWindow.CollectionScreen }, new List<GameWindow> { GameWindow.BoardUI });
                            yield return new WaitForSeconds(0.5f);
                            ShowAndHideScenesForGame();

                            sessionScript.CreateGameAndStart(player, selectedRuleset, isReplay);
                            StartCoroutine(SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ShowTargetScreen());

                            yield break;
                        }
                        else
                        {
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(false);

                            // out of film pop up
                            SceneActivationBehaviour<PopUpFilmActivator>.Instance.ShowOutOfFilmPanel(selectedRuleset, () =>
                            {
                                // coin purchase
                                int playerCoins = Player.Coins - globalSettings.Film.MoreFilmPurchaseCost;
                                SceneActivationBehaviour<UICoinCounterActivator>.Instance.CoinCounterClaim(playerCoins, (globalSettings.Film.MoreFilmPurchaseCost), 0f);
                                CoinsSpentHandler(globalSettings.Film.MoreFilmPurchaseCost, CoinSourceType.FilmPurchase);

                                SceneActivationBehaviour<UIFilmCounterActivator>.Instance.GrantFilm(globalSettings.Film.FilmRewardCount);
                                analyticsController.FilmEarned(globalSettings.Film.FilmRewardCount, FilmSourceType.CoinPurchase);

                                SceneActivationBehaviour<PopUpFilmActivator>.Instance.ShowThankyouPanel(() =>
                                {

                                    StartCoroutine(StartGameHandler(selectedRuleset));
                                    return;
                                });

                            }, () =>
                            {
                                // watch video
                                return;
                            }, () =>
                            {
                                // exit
                                return;
                            });

                            yield break;
                        }
                    }
                }
            }
            else
            {
                InterfaceController.Instance.Show(GameWindow.MainMenu);
                yield break;
            }
        }

        public void CallInterstitial(RuleSettings rulesForNextBoard)
        {
            DebugLog("[ADS] call interstitial");
            adsController.TryShowInterstitial(() =>
            {
                // started
                DebugLog("[ADS] interstitial video started");
                SoundController.Instance.MuteMusic(true);
            }, () =>
            {
                // success
                DebugLog("[ADS] interstitial video success");
                analyticsController.SendAdResult(AdResultType.Watched, AdType.Interstitial, AdSourceType.NotSet);
                StartCoroutine(StartGameHandler(rulesForNextBoard));
                SoundController.Instance.MuteMusic(false);

                adsController.lastInterstitialShownTime = DateTime.Now;
                print($"[ADS] Last interstitial shown time -> {DateTime.Now.ToString()}");

                return;
            }, () =>
            {
                // error
                DebugLog("[ADS] interstitial video error");
                analyticsController.SendAdResult(AdResultType.Error, AdType.Interstitial, AdSourceType.NotSet);
                StartCoroutine(StartGameHandler(rulesForNextBoard));
                SoundController.Instance.MuteMusic(false);
                return;
            });
        }

        public void CallPostGameRewardedVideo(Action started, Action error, Action cancelled, Action finished)
        {
            DebugLog("[ADS] call post game rewarded video");

            adsController.TryShowIncentivised(() =>
            {
                // started
                DebugLog("[ADS] rewarded video started");
                analyticsController.SendAdResult(AdResultType.Started, AdType.RewardedVideo, AdSourceType.PostGame);
                SoundController.Instance.MuteMusic(true);

                started?.Invoke();

            }, () =>
            {
                // finished
                DebugLog("[ADS] rewarded video finished");
                analyticsController.SendAdResult(AdResultType.Watched, AdType.RewardedVideo, AdSourceType.PostGame);
                SoundController.Instance.MuteMusic(false);

                finished?.Invoke();

            }, () =>
            {
                // error
                DebugLog("[ADS] rewarded video error");
                analyticsController.SendAdResult(AdResultType.Error, AdType.RewardedVideo, AdSourceType.PostGame);
                SoundController.Instance.MuteMusic(false);

                error?.Invoke();

            }, () =>
            {
                // cancelled
                DebugLog("[ADS] rewarded video cancelled");
                analyticsController.SendAdResult(AdResultType.Aborted, AdType.RewardedVideo, AdSourceType.PostGame);
                SoundController.Instance.MuteMusic(false);

                cancelled?.Invoke();
                return;
            });
        }

        public void CallRewardedVideo(AdSourceType adSource, bool inGame = false, RuleSettings gameRules = null)
        {
            DebugLog("[ADS] call rewarded video");
            if (inGame)
            {
                sessionScript.OnPauseClick();
            }

            adsController.TryShowIncentivised(() =>
            {
                // started
                DebugLog("[ADS] rewarded video started");
                analyticsController.SendAdResult(AdResultType.Started, AdType.RewardedVideo, adSource);
                SoundController.Instance.MuteMusic(true);
            }, () =>
            {
                // finished
                DebugLog("[ADS] rewarded video finished");
                analyticsController.SendAdResult(AdResultType.Watched, AdType.RewardedVideo, adSource);
                SoundController.Instance.MuteMusic(false);

                if (adSource != AdSourceType.FilmPopUp)
                {
                    DebugLog("[ADS] adsource not film pop up");
                    SceneActivationBehaviour<PopupClaimCoinsActivator>.Instance.ShowClaimPopup(GameConstants.MainGame.FeatureMessages.ClaimYourPrizeHeader, globalSettings.Coins.RewardedVideoCoinRewardCount, CoinSourceType.VideoWatched, () =>
                    {
                        if (inGame)
                        {
                            sessionScript.OnResumeClick();
                        }
                        return;
                    });
                }
                else
                {
                    DebugLog("[ADS] thank you panel");
                    SceneActivationBehaviour<UIFilmCounterActivator>.Instance.GrantFilm(globalSettings.Film.FilmRewardCount);
                    analyticsController.FilmEarned(globalSettings.Film.FilmRewardCount, FilmSourceType.RewardedVideo);

                    SceneActivationBehaviour<PopUpFilmActivator>.Instance.ShowThankyouPanel(() =>
                    {
                        DebugLog("[TEST] claimed " + gameRules.PuzzleNameKey);

                        StartCoroutine(StartGameHandler(gameRules));
                        return;
                    });
                }
            }, () =>
            {
                // error
                DebugLog("[ADS] rewarded video error");
                analyticsController.SendAdResult(AdResultType.Error, AdType.RewardedVideo, adSource);
                SoundController.Instance.MuteMusic(false);
                SceneActivationBehaviour<PopupRewardedVideoActivator>.Instance.ShowVideoErrorPopup(() =>
                {
                    if (inGame)
                    {
                        sessionScript.OnResumeClick();
                    }
                    return;
                });

            }, () =>
            {
                // cancelled
                DebugLog("[ADS] rewarded video cancelled");
                analyticsController.SendAdResult(AdResultType.Aborted, AdType.RewardedVideo, adSource);
                SoundController.Instance.MuteMusic(false);
                SceneActivationBehaviour<BoardBlurActivator>.Instance.Hide();
                if (inGame)
                {
                    sessionScript.OnResumeClick();
                }
                return;
            });
        }

        public void HintUseHandler(Action<bool, int, bool, int> hintsSaved)
        {
            bool sufficientCoins = false;
            bool previousHint = player.Hints > 0;

            if (player.Hints > 0)
            {
                player.Hints -= 1;
                serverController.PersistPlayerProgress(player);

                analyticsController.HintUsed(HintType.FreeHint);
            }
            else
            {
                if (player.Coins >= globalSettings.Hints.HintCost)
                {
                    CoinsSpentHandler(globalSettings.Hints.HintCost, CoinSourceType.HintPurchased);
                    SceneActivationBehaviour<UICoinCounterActivator>.Instance.CoinCounterSpend(player.Coins, globalSettings.Hints.HintCost, 0f);
                    analyticsController.HintUsed(HintType.PaidHint);

                    sufficientCoins = true;
                }
                else sufficientCoins = false;
            }

            hintsSaved?.Invoke(previousHint, player.Hints, sufficientCoins, player.Coins);
        }

        public void CoinsSpentHandler(int coinCount, CoinSourceType coinSourceType)
        {
            //COINS SPENT - TODO ADD ANALYTIC FOR ADJUST
            player.Coins -= coinCount;
            serverController.PersistPlayerProgress(player);
            //analyticsController.SendCoinSpent(coinCount);
            DebugLog($"Coins spent handler: {coinCount * -1}");
            analyticsController.CoinsEarned(player.Coins, coinCount*-1, coinSourceType);
        }

        public void CoinsGrantedHandler(int coinCount, CoinSourceType coinSourceType)
        {
            player.Coins += coinCount;
            serverController.PersistPlayerProgress(player);

            // coin analytics
            analyticsController.CoinsEarned(player.Coins, coinCount, coinSourceType);
        }

        public void FilmSpentHandler()
        {
            player.Film -= 1;
            serverController.PersistPlayerProgress(player);
            SceneActivationBehaviour<UIFilmCounterActivator>.Instance.SpendFilm(player.Film);
        }

        public void FilmGrantedHandler(int filmCount, Action<int> returnNewFilmCount = null)
        {
            if (player != null)
            {
                player.Film += filmCount;
                player.Film = Mathf.Clamp(player.Film, 0, globalSettings.Film.MaxFilmCount);

                serverController.PersistPlayerProgress(player);

                // coin analytics TODO: film analytics
                //analyticsController.FilmEarned(player.Film, FilmSourceType.)

                returnNewFilmCount?.Invoke(player.Film);
            }
            else return;
        }

        public void NewLocationRewardClaimed()
        {
            player.NewLocation = false;
            serverController.PersistPlayerProgress(player);

            analyticsController.NewLocationUnlocked(player);
        }

        public void UpdatePlayerAdPrefs()
        {
            if (!player.HasRemovedAds)
            {
                player.HasRemovedAds = true;
                serverController.PersistPlayerProgress(player);
            }
        }

        [UsedImplicitly]
        private void OnApplicationPause(bool isPaused)
        {
            if (isPaused)
            {
                // App going to background

                DebugLog($"[NOTIFICATION] app going into background now");
                Crashlytics.Log($"App going into background (Game Controller)");

                // clear previously scheduled alerts
                notificationController.ClearAllNotifications();

                double timeUntilFull = GetSecondsUntilFilmIsFull();
                if (timeUntilFull > 0)
                {
                    notificationController.ScheduleFilmReplenishmentNotification(timeUntilFull);
                }

                // updates miss you alert
                if (!ftueController.ShouldShowOneDayNotification)
                {
                    notificationController.ScheduleOneDayNotification();
                }
            }
            else
            {
                // App is restoring
                Crashlytics.Log($"App restoring from background (Game Controller)");
            }
        }

        private void OnApplicationQuit()
        {
            // App is quitting
            Crashlytics.Log($"App quitting (Game Controller)");
        }

        private double GetSecondsUntilFilmIsFull()
        {
            if (player != null && SceneActivationBehaviour<UIFilmCounterActivator>.Instance.isActiveAndEnabled)
            {
                return globalSettings.Film.FilmAwardTimerInSeconds * (9 - player.Film) + SceneActivationBehaviour<UIFilmCounterActivator>.Instance.TimeSpanToNextFilm.TotalSeconds;
            }
            return 0;
        }

        private void DebugLog(string message)
        {
            if (!debugMode)
            {
                return;
            }

            Debug.Log(message);
        }
    }
}
