using System.Collections;
using System.Collections.Generic;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Settings.Autogenerated;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace Peak.QuixelLogic.Scripts.Game
{
    public sealed class GridLabelScript : MonoBehaviour
    {
        /// <summary>
        /// 
        /// </summary>
        [SerializeField]
        private List<int> values = new List<int>();

        [SerializeField]
        private int group;

        [SerializeField]
        private List<int> groupSizes = new List<int>();

        // 0 = group 1 etc.
        [SerializeField]
        private List<TextMeshProUGUI> numbers = new List<TextMeshProUGUI>();

        [SerializeField]
        private List<int> selectedCells = new List<int>();

        [SerializeField]
        private List<int> selectedGroupSizes = new List<int>();

        [SerializeField]
        private Image labelImage;

#if PREVIEWINEDITOR
        private void OnValidate()
        {
            Invoke(nameof(CalculateNumbers), 0.1f);
        }
#endif

        private void Start()
        {
            Invoke(nameof(CalculateNumbers), 0.1f);
        }

        public void SetGridLabel(int Coordinate)
        {
            values.Add(Coordinate);
        }

        private void CalculateNumbers()
        {
            groupSizes.Clear();

            foreach (TextMeshProUGUI number in numbers)
            {
                number.gameObject.SetActive(false);
            }

            if (values.Count < 1)
            {
                numbers[0].gameObject.SetActive(true);
                numbers[0].text = 0.ToString();

                SetLabels(false, true);

                return;
            }

            if (values.Count > 0)
            {
                group = 1;
                int currentGroupValue = 1;

                groupSizes.Add(currentGroupValue);

                int previousNumber = values[0];

                for (int i = 1; i < values.Count; i++)
                {
                    if (values[i] - 1 == previousNumber)
                    {
                        currentGroupValue += 1;
                        previousNumber = values[i];

                        groupSizes[group - 1] = currentGroupValue;
                    }
                    else
                    {
                        group += 1;
                        currentGroupValue = 1;
                        previousNumber = values[i];

                        groupSizes.Add(currentGroupValue);
                    }
                }

                ShowNumbers();
            }
        }

        private void ShowNumbers()
        {
            for (int i = 0; i < groupSizes.Count; i++)
            {
                numbers[i].gameObject.SetActive(true);
                numbers[i].text = groupSizes[i].ToString();
            }

            if (groupSizes[0] == 10)
            {
                GetComponent<GridLayoutGroup>().cellSize = new Vector2(45, 38);
            }
        }

        public void ClearAll()
        {
            values.Clear();
            groupSizes.Clear();

            group = 0;

            for (int i = 0; i < 5; i++)
            {
                numbers[i].text = "";
            }
        }

        public void CalculateCurrentSelectedCells(int NewSelectedCell, bool AddOrDelete)
        {
            if (AddOrDelete)
            {
                selectedCells.Add(NewSelectedCell);
            }
            else
            {
                for (int i = 0; i < selectedCells.Count; i++)
                {
                    if (selectedCells[i].Equals(NewSelectedCell))
                    {
                        selectedCells.RemoveAt(i);
                    }
                }
            }

            CalculateSelectedCellsGroupSizes();
        }

        private void CalculateSelectedCellsGroupSizes()
        {
            selectedGroupSizes.Clear();

            if (selectedCells.Count > 0)
            {
                int selectedGroup = 1;
                int selectedCurrentGroupValue = 1;

                selectedGroupSizes.Add(selectedCurrentGroupValue);

                selectedCells.Sort();

                int previousNumber = selectedCells[0];

                for (int i = 1; i < selectedCells.Count; i++)
                {
                    if (selectedCells[i] - 1 == previousNumber)
                    {
                        selectedCurrentGroupValue += 1;
                        previousNumber = selectedCells[i];

                        selectedGroupSizes[selectedGroup - 1] = selectedCurrentGroupValue;
                    }
                    else
                    {
                        selectedGroup += 1;
                        selectedCurrentGroupValue = 1;
                        previousNumber = selectedCells[i];

                        selectedGroupSizes.Add(selectedCurrentGroupValue);
                    }
                }

                if (!CheckLists())
                {
                    SetLabels(true);
                }
                else
                {
                    SetLabels(false);
                }
            }
            else
            {
                if (values.Count == 0)
                {
                    SetLabels(false, true);
                    return;
                }
                else
                {
                    SetLabels(true);
                    return;
                }
            }
        }

        private bool CheckLists()
        {
            if (!selectedGroupSizes.Count.Equals(groupSizes.Count))
                return false;
            for (int i = 0; i < selectedGroupSizes.Count; i++)
            {
                if (!selectedGroupSizes[i].Equals(groupSizes[i]))
                {
                    return false;
                }
            }
            return true;
        }

        private void SetLabels(bool isDefault, bool dim = false)
        {
            if (isDefault)
            {
                labelImage.color = GameConstants.UIColours.LabelColourDefault;
                foreach (TextMeshProUGUI number in numbers)
                {
                    number.color = GameConstants.UIColours.TextColourDefault;
                }
            }
            else
            {
                if (SceneActivationBehaviour<GameLogicActivator>.Instance.SessionScript.IsGameBeingPlayed())
                {
                    SoundController.Instance.PlayAudioClip(SoundSettingsKey.Rowcolumncomplete);
                }

                labelImage.color = GameConstants.UIColours.LabelColourHighlighted;
                foreach (TextMeshProUGUI number in numbers)
                {
                    number.color = dim ? (Color)GameConstants.UIColours.TextColourDimmed : (Color)GameConstants.UIColours.TextColourHighlighted;
                }

                SceneActivationBehaviour<BoardUIActivator>.Instance.AlienCelebrateTrigger();
            }
        }
    }
}