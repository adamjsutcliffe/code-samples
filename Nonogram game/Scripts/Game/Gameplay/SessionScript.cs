using System;
using System.Collections;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using Peak.QuixelLogic.Scripts.Autogenerated;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Common.Extensions;
using Peak.QuixelLogic.Scripts.Settings;
using Peak.QuixelLogic.Scripts.Settings.Autogenerated;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;

namespace Peak.QuixelLogic.Scripts.Game.Gameplay
{
    /// <summary>
    /// Holds and manipulates UI in a session of the game
    /// </summary>
    public sealed class SessionScript : MonoBehaviour
    {
        #region Internal state

        /// <summary>
        /// Settings object
        /// </summary>
        private RuleSettings currentSessionRuleset;

        /// <summary>
        /// The game play.
        /// </summary>
        private GameplayScript gameplay;

        #endregion

        /// <summary>
        /// Shows if the game is in progress (timer is ticking, no goal is reached)
        /// </summary>
        public bool IsInGame { get; private set; }

        public bool IsFtueGame { get; private set; }

        public bool GameHasBegun { get; private set; }

        /// <summary>
        /// Check for if game is already paused
        /// </summary>
        public bool IsGamePaused => gameplay != null && gameplay.IsPaused;

        #region Events

        public event GameStartedHandler SessionStarted;
        public event GamePausedHandler SessionPaused;
        public event GameResumedHandler SessionResumed;
        public event GameRestartedHandler SessionRestarted;
        public event PuzzleSolvedHandler SessionSolved;
        public event GameQuitHandler SessionFinished;

        #endregion

        #region Unity callbacks

        public GameplayScript CreateGameAndStart(Player player, RuleSettings ruleset, bool isReplay = false)
        {
            print("[TEST] create game and start ");

            currentSessionRuleset = ruleset;

            SceneActivationBehaviour<TopBarUIActivator>.Instance.SetLevelText(currentSessionRuleset.Id);
            gameplay = SceneActivationBehaviour<BoardUIActivator>.Instance.LoadBoard(currentSessionRuleset);
            GameType gameType = returnGameType(currentSessionRuleset, isReplay);
            gameplay.Configure(currentSessionRuleset, gameType, player.Film, isReplay);

            // handles
            gameplay.OnGameTimeChanged += GameTimeChangedHandler;
            gameplay.OnGameStarted += GameStartedHandler;
            gameplay.OnPaused += GamePausedHandler;
            gameplay.OnResumed += GameResumedHandler;
            gameplay.OnRestarted += GameRestartedHandler;
            gameplay.OnPuzzleSolved += PuzzleSolvedHandler;
            gameplay.OnGameQuit += GameQuitHandler;

            if (currentSessionRuleset.IsFtue)
            {
                print("[TEST] create game and start - is ftue ");

                if (player.FtuePassed)
                {
                    StartNormalGameplay();
                }
                else
                {
                    StartFtueGameplay();
                }
            }
            else
            {
                StartNormalGameplay();
            }

            IsFtueGame = currentSessionRuleset.IsFtue;

            return gameplay;
        }

        private void StartFtueGameplay()
        {
            SceneActivationBehaviour<TopBarUIActivator>.Instance.SetButtons(false);

            gameplay.StartSession(false);
            gameplay.SetTimer(false);
            IsInGame = true;
        }

        private void StartNormalGameplay()
        {
            SceneActivationBehaviour<TopBarUIActivator>.Instance.SetButtons(true);

            gameplay.StartSession();
            gameplay.SetTimer(true);
            IsInGame = true;
        }

        private GameType returnGameType(RuleSettings ruleset, bool isReplay)
        {
            return ruleset.IsGold && isReplay ? GameType.ReplayGold : ruleset.IsGold && !isReplay ? GameType.Gold : !ruleset.IsGold && !isReplay ? GameType.Normal : GameType.ReplayNormal;
        }

        private void GameStartedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                SessionStarted?.Invoke(gameData);
            }
        }

        private void GamePausedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                SessionPaused?.Invoke(gameData);
            }
        }

        private void GameResumedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                SessionResumed?.Invoke(gameData);
            }
        }

        private void GameRestartedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                IsInGame = false;

                // clean up gameboard
                SceneActivationBehaviour<BoardUIActivator>.Instance.DestroyBoard();

                SessionRestarted?.Invoke(gameData);
                currentSessionRuleset = null;

                StartCoroutine(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.StartGameHandler(gameData.Ruleset));
            }
        }

        private void PuzzleSolvedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                IsInGame = false;

                if (!gameData.Ruleset.IsGold)
                {
                    SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.RecordLevelCompletion(gameData);
                }
                else
                {
                    SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.RecordGoldLevelCompletion(gameData);
                }

                SessionSolved?.Invoke(gameData);
            }
        }

        private void GameQuitHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                IsInGame = false;

                // clean up gameboard
                SceneActivationBehaviour<BoardUIActivator>.Instance.DestroyBoard();

                SessionFinished?.Invoke(gameData);
                currentSessionRuleset = null;
            }
        }

        private void GameTimeChangedHandler(MainGameData gameData)
        {
            if (gameData != null)
            {
                gameplay.GameData.StarScore = SceneActivationBehaviour<BonusBarUIActivator>.Instance.SetGameTime(gameData);
            }
        }

        #endregion

        #region UI callbacks

        [UsedImplicitly] // by Game UI
        public void OnPauseClick()
        {
            if (!IsInGame) return;
            gameplay.PauseSession();
        }

        [UsedImplicitly] // by Game UI
        public void OnResumeClick()
        {
            if (!IsInGame) return;
            gameplay.ResumeSession();
        }

        [UsedImplicitly] // by Game UI
        public void OnRestartClick()
        {
            gameplay.RestartSession();
        }

        [UsedImplicitly] // by Game UI
        public void OnQuitClick()
        {
            gameplay.QuitSession();
        }

        public bool IsGameBeingPlayed()
        {
            return gameplay.GameData.SecondsLeft < gameplay.GameData.TimeLimit;
        }

        #endregion
    }
}