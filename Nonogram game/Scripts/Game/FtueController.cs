using System;
using System.Collections;
using System.Collections.Generic;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using Peak.QuixelLogic.Scripts.Game;
using Peak.QuixelLogic.Scripts.Game.Gameplay;
using Peak.QuixelLogic.Scripts.Game.FtueGameplay;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using Peak.QuixelLogic.Scripts.Settings;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Autogenerated;

namespace Peak.QuixelLogic.Scripts.Game
{
    public class FtueController : MonoBehaviour
    {
        [SerializeField]
        private SessionScript sessionScript;

        [SerializeField]
        private ServerController serverController;

        [SerializeField]
        private GameController gameController;

        [SerializeField]
        private NotificationController notificationController;

        private OverlayUISceneActivator overlayUISceneActivator;

        [SerializeField]
        private AnalyticsController analyticsController;

        // Some FTUE information
        private FtueInformation ftueInformation;

        [SerializeField]
        private GlobalSettings globalSettings;

        [SerializeField]
        private FtueGame_1 ftueGame_1;

        [SerializeField]
        private FtueGame_2 ftueGame_2;

        [SerializeField]
        private FtueGame_3 ftueGame_3;

        [SerializeField]
        private FtueGame_4 ftueGame_4;

        [SerializeField]
        private FtueGame_5 ftueGame_5;

        [SerializeField]
        private FtueGame_6 ftueGame_6;

        public bool ShouldPlayFirstFtueGame => ftueInformation != null && !ftueInformation.IsPart1Passed;
        public bool ShouldPlaySecondFtueGame => ftueInformation != null && !ftueInformation.IsPart2Passed;
        public bool ShouldPlayThirdFtueGame => ftueInformation != null && !ftueInformation.IsPart3Passed;
        public bool ShouldPlayFourthFtueGame => ftueInformation != null && !ftueInformation.IsPart4Passed;
        public bool ShouldPlayFifthFtueGame => ftueInformation != null && !ftueInformation.IsPart5Passed;
        public bool ShouldPlaySixthFtueGame => ftueInformation != null && !ftueInformation.IsPart6Passed;
        public bool ShouldShowHintTip => ftueInformation != null && !ftueInformation.IsHintTipPassed;
        public bool ShouldShowCollectionView => ftueInformation != null && !ftueInformation.IsCollectionViewPassed;

        public bool ShouldIntroduceFilm => ftueInformation != null && !ftueInformation.IsFilmIntroPassed;

        public bool ShouldShowOneDayNotification => ftueInformation != null && !ftueInformation.OneDayNotificationScheduled;
        public bool ShouldShowNotificationPopup => ftueInformation != null && !ftueInformation.NotificationPopupShown;
        public bool ShouldShowGdprPopup => ftueInformation != null && !ftueInformation.isGdprNotificationShown;

        public void InitialiseFtue()
        {
            ftueInformation = serverController.LoadFtueInformation();
            serverController.PersistFtue(ftueInformation);

            overlayUISceneActivator = SceneActivationBehaviour<OverlayUISceneActivator>.Instance;
        }

        public void NotificationsAccepted()
        {
            ftueInformation.NotificationPopupShown = true;
            ftueInformation.OneDayNotificationScheduled = true;
            serverController.PersistFtue(ftueInformation);
        }

        public void GdprAccepted()
        {
            ftueInformation.isGdprNotificationShown = true;
            serverController.PersistFtue(ftueInformation);
        }

        public void StartFtueGame(Player player, RuleSettings selectedRuleset)
        {
            if (ShouldPlayFirstFtueGame && int.Parse(selectedRuleset.Id).Equals(1))
            {
                ftueGame_1.StartGame(player, selectedRuleset, this, sessionScript, overlayUISceneActivator);
            }
            else if (ShouldPlaySecondFtueGame && int.Parse(selectedRuleset.Id).Equals(2))
            {
                ftueGame_2.StartGame(player, selectedRuleset, this, sessionScript, overlayUISceneActivator);
            }
            else if (ShouldPlayThirdFtueGame && int.Parse(selectedRuleset.Id).Equals(3))
            {
                ftueGame_3.StartGame(player, selectedRuleset, this, sessionScript, overlayUISceneActivator);
            }
            else if (ShouldPlayFourthFtueGame && int.Parse(selectedRuleset.Id).Equals(4))
            {
                ftueGame_4.StartGame(player, selectedRuleset, this, sessionScript, overlayUISceneActivator);
            }
            else if (ShouldPlayFifthFtueGame && int.Parse(selectedRuleset.Id).Equals(5))
            {
                ftueGame_5.StartGame(player, selectedRuleset, this, sessionScript, overlayUISceneActivator);
            }
            else if (ShouldPlaySixthFtueGame && int.Parse(selectedRuleset.Id).Equals(6))
            {
                ftueGame_6.StartGame(player, selectedRuleset, this, sessionScript, overlayUISceneActivator, ShouldShowHintTip);
            }
        }

        public void CollectionViewFtueStep()
        {
            if (ShouldShowCollectionView && gameController.Player.MainPuzzleIndex.Equals(6))
            {
                InterfaceController.Instance.Show(GameWindow.OverlayUIScene);
                SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowHidePlayButton(false);
                SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ShowDim(true);

                SendFtueProgress("Collection_45");

                overlayUISceneActivator.ShowFtueGameplayMessage(GameConstants.Ftue.CollectionView.FtueMessages.InstructionsCollection_1, true, true, 0, true);

                overlayUISceneActivator.SubscribeForFullScreenTap(() =>
                {
                    overlayUISceneActivator.ShowFtueGameplayMessage(GameConstants.Ftue.CollectionView.FtueMessages.InstructionsCollection_2, true, true, 0, true);

                    SendFtueProgress("ReplayPlay_46");

                    overlayUISceneActivator.SubscribeForFullScreenTap(() =>
                        {
                            overlayUISceneActivator.HideFtueMessages();
                            SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowHidePlayButton(true);
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ShowDim(false);
                            ftueInformation.IsPart1Passed = ftueInformation.IsPart2Passed = ftueInformation.IsPart3Passed = ftueInformation.IsPart4Passed = ftueInformation.IsPart5Passed = ftueInformation.IsPart6Passed = ftueInformation.IsCollectionViewPassed = true;
                            serverController.PersistFtue(ftueInformation);
                        });
                });
            }
            else return;
        }

        public void FilmIntroductionFtueStep()
        {
            if (ShouldIntroduceFilm && gameController.Player.MainPuzzleIndex.Equals(7))
            {
                InterfaceController.Instance.Show(GameWindow.OverlayUIScene);
                SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowHidePlayButton(false);
                SceneActivationBehaviour<UIFilmCounterActivator>.Instance.ShowDim(true);

                SendFtueProgress("SpendsFilm_47");

                overlayUISceneActivator.ShowFtueGameplayMessage(GameConstants.Ftue.CollectionView.FtueMessages.InstructionsCollection_3, true, true, 0, true);

                overlayUISceneActivator.SubscribeForFullScreenTap(() =>
                {
                    overlayUISceneActivator.ShowFtueGameplayMessage(GameConstants.Ftue.CollectionView.FtueMessages.InstructionsCollection_4, true, true, 0, true);

                    SendFtueProgress("GetMoreFilm_48");

                    overlayUISceneActivator.SubscribeForFullScreenTap(() =>
                    {
                        overlayUISceneActivator.HideFtueMessages();
                        SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowHidePlayButton(true);
                        SceneActivationBehaviour<UIFilmCounterActivator>.Instance.ShowDim(false);
                        ftueInformation.IsPart1Passed = ftueInformation.IsPart2Passed = ftueInformation.IsPart3Passed = ftueInformation.IsPart4Passed = ftueInformation.IsPart5Passed = ftueInformation.IsPart6Passed = ftueInformation.IsCollectionViewPassed = ftueInformation.IsFilmIntroPassed = true;
                        serverController.PersistFtue(ftueInformation);
                    });
                });
            }
            else return;
        }

        public void SendFtueProgress(string ftueStep)
        {
            analyticsController.SendFtueProgress(ftueStep);
        }

        [SerializeField]
        private List<bool> ftueSteps = new List<bool>();

        public void ProceedToGameOverAward(Player player, int ftueGameNumber)
        {
            ftueSteps.Clear();

            for (int i = 0; i < 6; i++)
            {
                ftueSteps.Add(i < ftueGameNumber);
            }

            ftueInformation.IsPart1Passed = ftueSteps[0];
            ftueInformation.IsPart2Passed = ftueSteps[1];
            ftueInformation.IsPart3Passed = ftueSteps[2];
            ftueInformation.IsPart4Passed = ftueSteps[3];
            ftueInformation.IsPart5Passed = ftueSteps[4];
            ftueInformation.IsPart6Passed = ftueSteps[5];

            if (ftueSteps[5])
            {
                analyticsController.SendFtueComplete();
                player.FtuePassed = true;
            }

            serverController.PersistFtue(ftueInformation);
            serverController.PersistPlayerProgress(player);
        }

        public void PersistHintTipUse(Player player)
        {
            ftueInformation.IsHintTipPassed = true;
            serverController.PersistFtue(ftueInformation);
            serverController.PersistPlayerProgress(player);
        }

        public void ListenForCurrentFtueCellSelection(GameplayScript gameplay = null, List<Vector2> targetCoordinatesForCurrentStep = null, Action oneCellSelected = null, Action targetCellsSelected = null)
        {
            List<Vector2> selectedCells = new List<Vector2>();

            gameplay.OnFtueCellSelection += (CellCoordinate, AddorRemove) =>
            {
                oneCellSelected?.Invoke();

                if (AddorRemove)
                {
                    selectedCells.Add(CellCoordinate);
                }

                if (CheckCorrectCells(selectedCells, targetCoordinatesForCurrentStep))
                {
                    targetCellsSelected?.Invoke();
                    return;
                }
            };
        }

        public void ListenForFirstSpecificSelection(GameplayScript gameplay = null, List<Vector2> targetCells = null, Action rowOneSelected = null)
        {
            List<Vector2> firstRowCells = targetCells;
            List<Vector2> selectedCells = new List<Vector2>();

            gameplay.OnFtueCellSelection += (CellCoordinate, AddorRemove) =>
            {
                if (AddorRemove)
                {
                    selectedCells.Add(CellCoordinate);
                }

                if (CheckCorrectCells(selectedCells, firstRowCells))
                {
                    rowOneSelected?.Invoke();
                    return;
                }
            };
        }

        public void ListenForSecondSpecificSelection(GameplayScript gameplay = null, List<Vector2> targetCells = null, Action rowTwoSelected = null)
        {
            List<Vector2> secondRowCells = targetCells;
            List<Vector2> selectedCells = new List<Vector2>();

            gameplay.OnFtueCellSelection += (CellCoordinate, AddorRemove) =>
            {
                if (AddorRemove)
                {
                    selectedCells.Add(CellCoordinate);
                }

                if (CheckCorrectCells(selectedCells, secondRowCells))
                {
                    rowTwoSelected?.Invoke();
                    return;
                }
            };
        }

        public void ListenForCurrentFtueCellMarking(GameplayScript gameplay = null, List<Vector2> targetCoordinatesForCurrentStep = null, Action targetCellsMarked = null)
        {
            List<Vector2> markedCells = new List<Vector2>();

            gameplay.OnFtueCellMark += (CellCoordinate, AddorRemove) =>
            {
                if (AddorRemove)
                {
                    markedCells.Add(CellCoordinate);
                }

                if (CheckCorrectCells(markedCells, targetCoordinatesForCurrentStep))
                {
                    targetCellsMarked?.Invoke();
                    return;
                }
            };
        }

        public void ListenForFirstSpecificMarking(GameplayScript gameplay = null, Action columnOneSelected = null)
        {
            List<Vector2> firstColumnCells = new List<Vector2> { new Vector2(2, 1), new Vector2(5, 1) };
            List<Vector2> markedCells = new List<Vector2>();

            gameplay.OnFtueCellMark += (CellCoordinate, AddorRemove) =>
            {
                if (AddorRemove)
                {
                    markedCells.Add(CellCoordinate);
                }

                if (CheckCorrectCells(markedCells, firstColumnCells))
                {
                    columnOneSelected?.Invoke();
                    return;
                }
            };
        }

        public void ListenForSecondSpecificMarking(GameplayScript gameplay = null, Action columnTwoSelected = null)
        {
            List<Vector2> secondColumnCells = new List<Vector2> { new Vector2(2, 5), new Vector2(5, 5) };
            List<Vector2> markedCells = new List<Vector2>();

            gameplay.OnFtueCellMark += (CellCoordinate, AddorRemove) =>
            {
                if (AddorRemove)
                {
                    markedCells.Add(CellCoordinate);
                }

                if (CheckCorrectCells(markedCells, secondColumnCells))
                {
                    columnTwoSelected?.Invoke();
                    return;
                }
            };
        }

        private bool CheckCorrectCells(List<Vector2> selectedCells, List<Vector2> targetCoordinatesForCurrentStep)
        {
            int correctCells = 0;
            for (int i = 0; i < selectedCells.Count; i++)
            {
                for (int j = 0; j < targetCoordinatesForCurrentStep.Count; j++)
                {
                    if (selectedCells[i].Equals(targetCoordinatesForCurrentStep[j]))
                    {
                        correctCells += 1;
                    }
                    if (correctCells.Equals(targetCoordinatesForCurrentStep.Count))
                    {
                        selectedCells.Clear();
                        return true;
                    }
                }
            }
            return false;
        }
    }
}
