using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Settings;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using TMPro;
using UnityEngine.UI;
using JetBrains.Annotations;
using UnityEngine.EventSystems;
using System;
using Peak.QuixelLogic.Scripts.Settings.Autogenerated;
using Peak.QuixelLogic.Scripts.Common;

namespace Peak.QuixelLogic.Scripts.Game.CollectionScripts
{
    public sealed class LevelCardScript : MonoBehaviour
    {
        [SerializeField]
        private Button clicker;

        private string uniqueID;
        public string UniqueID => uniqueID;

        [SerializeField]
        private Image incompletePoloroid;

        [SerializeField]
        private Image cardUnplayedImage;

        [SerializeField]
        private Image completePoloroid;

        [SerializeField]
        private GameObject poloroidHolder;

        [SerializeField]
        private Image puzzleIcon;

        [SerializeField]
        private GameObject starHolder;

        [SerializeField]
        private GameObject activeGameOutline;

        [SerializeField]
        private List<GameObject> stars = new List<GameObject>();

        private RuleSettings thisLevelRules;

        public Vector2 LevelLocale => levelLocale;
        private Vector2 levelLocale;

        [SerializeField]
        private Animator levelCardAnimator;

        [SerializeField]
        private TextMeshProUGUI levelNumber;

        private bool nextLevelInOrder;

        private int currentStarRecord;

        private Sprite puzzleSprite;

        [SerializeField]
        private GameObject clip;

        public enum CardState
        {
            Unplayed,
            Played
        }

        private CardState cardState;
        public CardState thisCardState
        {
            get { return cardState; }
            set
            {
                cardState = value;

                switch (cardState)
                {
                    case CardState.Unplayed:

                        poloroidHolder.gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0, 0, RandomRotation()));
                        levelNumber.gameObject.SetActive(true);

                        break;

                    case CardState.Played:

                        incompletePoloroid.gameObject.SetActive(false);
                        completePoloroid.gameObject.SetActive(true);
                        puzzleIcon.gameObject.SetActive(true);
                        poloroidHolder.gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0, 0, 0));
                        levelNumber.gameObject.SetActive(false);

                        break;
                }
            }
        }

        public void HideClip()
        {
            clip.SetActive(false);
        }

        public void PopulateLevelInformation(RuleSettings levelRules, int group, Sprite groupBackground)
        {
            thisLevelRules = levelRules; // give level rules
            levelNumber.text = thisLevelRules.Id;
            uniqueID = levelRules.UniqueID;
            puzzleSprite = levelRules.PuzzleIcon;
            //puzzleIcon.sprite = levelRules.PuzzleIcon;
            gameObject.SetActive(true);

            levelLocale = new Vector2(group, int.Parse(thisLevelRules.Id));

            levelRules.BoardBackgroundImage = groupBackground;

            return;
        }

        private void OnEnable()
        {
            if (puzzleSprite != null && currentStarRecord != 0)
            {
                puzzleIcon.sprite = puzzleSprite;
            }
            else return;
        }

        private void OnDisable()
        {
            if (puzzleSprite != null)
            {
                puzzleIcon.sprite = null;
            }
            return;
        }

        public void LoadPlayerLevelProgress(string uniqueID, bool nextToBePlayed, bool isLevelGroupLocked, Sprite levelCardSprite)
        {
            currentStarRecord = int.Parse(uniqueID.Substring(uniqueID.Length - 1));

            if (nextToBePlayed)
            {
                SceneActivationBehaviour<CollectionScreenActivator>.Instance.SendNextLevelToBePlayed(thisLevelRules, this);

                nextLevelInOrder = true;
                activeGameOutline.SetActive(!SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.GameComplete);
            }
            else
            {
                nextLevelInOrder = false;
                activeGameOutline.SetActive(false);
            }

            if (!isLevelGroupLocked)
            {
                // set unlocked group backgrounds to group background
                cardUnplayedImage.sprite = levelCardSprite;
            }

            if (!currentStarRecord.Equals(0))
            {
                thisCardState = CardState.Played;
            }
            else
            {
                thisCardState = CardState.Unplayed;
            }

            SetStarsForLevel(currentStarRecord);
        }

        private void SetStarsForLevel(int starRecord)
        {
            if (!starRecord.Equals(0))
            {
                clicker.interactable = true;
                starHolder.SetActive(true);

                for (int i = 0; i < starRecord; i++)
                {
                    stars[i].SetActive(true);
                }
            }
            else
            {
                clicker.interactable = false;
                starHolder.SetActive(false);
            }

            clicker.interactable |= nextLevelInOrder;
        }

        private float RandomRotation()
        {
            float i = UnityEngine.Random.Range(-8f, 8f);
            return i;
        }

        public void ClickCard()
        {
            SoundController.Instance.PlayAudioClip(SoundSettingsKey.Buttonpressed);

            switch (cardState)
            {
                case CardState.Unplayed:

                    if (nextLevelInOrder)
                    {
                        SceneActivationBehaviour<CollectionScreenActivator>.Instance.PlayNextLevel();
                    }
                    else return;

                    break;

                case CardState.Played:

                    SceneActivationBehaviour<PopupReplayLevelActivator>.Instance.ShowReplayPopupPanels(thisLevelRules, currentStarRecord, false, (bool purchased) =>
                    {
                        if (purchased)
                        {
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
                            Invoke(nameof(ReplayLevel), 0.5f);
                        }
                        else return;
                    });

                    break;
            }
        }

        // play level without ad
        [UsedImplicitly]
        public void ReplayLevel()
        {
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.CallValues(levelLocale.x, levelLocale.y);
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.PlayChosenLevel(thisLevelRules, this, true);
        }

        public void Reveal()
        {
            if (levelCardAnimator != null && gameObject.activeSelf)
            {
                SoundController.Instance.PlayAudioClip(SoundSettingsKey.Picturereveal);
                levelCardAnimator.SetTrigger("Reveal");
                levelNumber.gameObject.SetActive(false);
            }
        }
    }
}