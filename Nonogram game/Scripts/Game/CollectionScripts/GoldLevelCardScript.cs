using System.Collections;
using System.Collections.Generic;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Common.Localisation;
using Peak.QuixelLogic.Scripts.Game;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using Peak.QuixelLogic.Scripts.Settings;
using Peak.QuixelLogic.Scripts.Settings.Autogenerated;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace Peak.QuixelLogic.Scripts.Game.CollectionScripts
{
    public sealed class GoldLevelCardScript : MonoBehaviour
    {
        private RuleSettings thisLevelRules;

        private string uniqueID;
        public string UniqueID => uniqueID;

        [SerializeField]
        private Button clicker;

        [SerializeField]
        private Image incompletePoloroid;

        private Transform dropShadow;

        [SerializeField]
        private Image cardUnplayedImage;

        [SerializeField]
        private Image completePoloroid;

        [SerializeField]
        private GameObject poloroidHolder;

        [SerializeField]
        private Image puzzleIcon;

        [SerializeField]
        private GameObject starHolder;

        [SerializeField]
        private List<GameObject> stars = new List<GameObject>();

        [SerializeField]
        private Animator levelCardAnimator;

        [SerializeField]
        private TextMeshProUGUI levelNumber;

        [SerializeField]
        private GameObject padlockImage;

        [SerializeField]
        private GameObject costLabel;

        [SerializeField]
        private TextMeshProUGUI costLabelText;

        /// <summary>
        /// star record for this level for the player
        /// </summary>
        private int currentStarRecord;

        private Sprite puzzleSprite;

        public Vector2 LevelLocale => levelLocale;
        private Vector2 levelLocale;

        [SerializeField]
        private GameObject clip;

        public enum GoldCardState
        {
            Locked,
            Unlocked,
            Purchased,
            Complete
        }

        private GoldCardState goldCardState;
        public GoldCardState thisGoldCardState  // used for server based changes to gold level card states and animations
        {
            get { return goldCardState; }
            set
            {
                goldCardState = value;
                switch (goldCardState)
                {
                    case GoldCardState.Locked:
                        PlayerProgressStringBuilder.Instance.RemakePlayerGoldString(uniqueID, GoldCardState.Locked);
                        break;

                    case GoldCardState.Unlocked:
                        PlayerProgressStringBuilder.Instance.RemakePlayerGoldString(uniqueID, GoldCardState.Unlocked);
                        levelCardAnimator.SetTrigger("UnlockGold");
                        clicker.interactable = true;
                        break;

                    case GoldCardState.Purchased:
                        PlayerProgressStringBuilder.Instance.RemakePlayerGoldString(uniqueID, GoldCardState.Purchased);
                        levelCardAnimator.SetTrigger("PurchaseGold");
                        break;

                    case GoldCardState.Complete:
                        break;
                }
            }
        }

        private void Awake()
        {
            dropShadow = poloroidHolder.transform.GetChild(0);
        }

        public void HideClip()
        {
            clip.SetActive(false);
        }

        public void PopulateLevelInformation(RuleSettings levelRules, int group, Sprite groupBackground)
        {
            thisLevelRules = levelRules; // give level rules
            levelNumber.text = thisLevelRules.Id;
            uniqueID = levelRules.UniqueID;
            //puzzleIcon.sprite = levelRules.PuzzleIcon;
            puzzleSprite = levelRules.PuzzleIcon;
            gameObject.SetActive(true);
#if UNITY_ANDROID
            costLabelText.text = LocalisationSystem.GetLocalisedValue("play");
#else
            costLabelText.text = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.GlobalSettings.Coins.GoldLevelUnlockCost.ToString();
#endif


            levelLocale = new Vector2(group, int.Parse(thisLevelRules.Id));

            if (levelRules.BoardBackgroundImage == null) { levelRules.BoardBackgroundImage = groupBackground; }

            return;
        }

        private void OnEnable()
        {
            if (puzzleSprite != null && currentStarRecord != 0)
            {
                puzzleIcon.sprite = puzzleSprite;
            }
            else return;
        }

        private void OnDisable()
        {
            if (puzzleSprite != null)
            {
                puzzleIcon.sprite = null;
            }
            return;
        }

        public void LoadPlayerLevelProgress(string uniqueID, bool isLevelGroupLocked, Sprite levelCardSprite)
        {
            if (isLevelGroupLocked && goldCardState != GoldCardState.Locked)
            {
                thisGoldCardState = GoldCardState.Locked;
            }
            else
            {
                string subString = uniqueID.Substring(uniqueID.Length - 1);

                int n;
                bool isNumeric = int.TryParse(uniqueID.Substring(uniqueID.Length - 1), out n);

                if (!isNumeric)
                {
                    // check state of gold card
                    if (subString.Contains("L"))
                    {
                        goldCardState = GoldCardState.Locked;
                    }
                    else if (subString.Contains("U"))
                    {
                        goldCardState = GoldCardState.Unlocked;
                    }
                    else if (subString.Contains("P"))
                    {
                        goldCardState = GoldCardState.Purchased;
                    }

                    SetLevelAs(goldCardState);
                }
                else
                {
                    currentStarRecord = int.Parse(subString);

                    goldCardState = GoldCardState.Complete;
                    SetLevelAs(goldCardState);
                }
            }

            cardUnplayedImage.sprite = levelCardSprite;
        }

        public void SetLevelAs(GoldCardState cardState, bool animate = false)
        {
            switch (cardState)
            {
                case GoldCardState.Locked:

                    clicker.interactable = false;
                    poloroidHolder.gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0, 0, RandomRotation()));

                    break;

                case GoldCardState.Unlocked:

                    poloroidHolder.gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0, 0, RandomRotation()));
                    padlockImage.SetActive(false);
                    levelNumber.gameObject.SetActive(true);
                    costLabel.SetActive(true);
                    clicker.interactable = true;

                    break;

                case GoldCardState.Purchased:

                    poloroidHolder.gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0, 0, RandomRotation()));
                    padlockImage.SetActive(false);
                    levelNumber.gameObject.SetActive(true);
                    costLabel.SetActive(false);
                    clicker.interactable = true;

                    break;

                case GoldCardState.Complete:

                    incompletePoloroid.gameObject.SetActive(false);
                    dropShadow.gameObject.SetActive(false);
                    completePoloroid.gameObject.SetActive(true);
                    puzzleIcon.gameObject.SetActive(true);
                    poloroidHolder.gameObject.transform.localRotation = Quaternion.Euler(new Vector3(0, 0, 0));
                    SetStarsForLevel(currentStarRecord);

                    break;
            }
        }

        private void SetStarsForLevel(int starRecord)
        {
            if (!starRecord.Equals(0))
            {
                clicker.interactable = true;
                starHolder.SetActive(true);

                for (int i = 0; i < starRecord; i++)
                {
                    stars[i].SetActive(true);
                }
            }
            else
            {
                clicker.interactable = false;
                starHolder.SetActive(false);
            }
        }

        private float RandomRotation()
        {
            float i = UnityEngine.Random.Range(-4f, 4f);
            return i;
        }

        public void ClickGoldCard()
        {
            //thisGoldCardState = GoldCardState.Unlocked;
            //SetLevelAs(GoldCardState.Unlocked);

            if (goldCardState != GoldCardState.Locked)
            {
                SoundController.Instance.PlayAudioClip(SoundSettingsKey.Buttonpressed);
            }

            switch (goldCardState)
            {
                case GoldCardState.Unlocked:

                    //purchase
#if UNITY_ANDROID
                    SceneActivationBehaviour<PopUpAndroidGoldActivator>.Instance.ShowGoldPopup(thisLevelRules, this, cardUnplayedImage.sprite, (bool purchased) =>
                    {
                        if (purchased)
                        {
                            thisGoldCardState = GoldCardState.Purchased;
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
                            Invoke(nameof(PlayLevel), 0.75f);
                        }
                        else return;
                    });
#else

                    SceneActivationBehaviour<PopupGoldLevelPurchaseActivator>.Instance.ShowPopupGoldPurchasePanel((bool purchased) =>
                    {
                        if (purchased)
                        {
                            thisGoldCardState = GoldCardState.Purchased;
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
                            Invoke(nameof(PlayLevel), 0.75f);
                        }
                        else return;
                    });
#endif


                    break;

                case GoldCardState.Purchased:

                    //play level
                    PlayLevel();

                    break;

                case GoldCardState.Complete:

                    // replay level
                    SceneActivationBehaviour<PopupReplayLevelActivator>.Instance.ShowReplayPopupPanels(thisLevelRules, currentStarRecord, true, (bool purchased) =>
                    {
                        if (purchased)
                        {
                            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
                            Invoke(nameof(ReplayLevel), 0.5f);
                        }
                        else return;
                    });

                    break;
            }
        }

        // play level without ad
        public void PlayLevel()
        {
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.CallValues(levelLocale.x, levelLocale.y);
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.PlayChosenLevel(thisLevelRules, this);
        }

        public void ReplayLevel()
        {
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.CallValues(levelLocale.x, levelLocale.y);
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.PlayChosenLevel(thisLevelRules, this, true);
        }

        public void Reveal()
        {
            if (levelCardAnimator != null && gameObject.activeSelf)
            {
                SoundController.Instance.PlayAudioClip(SoundSettingsKey.Picturereveal);
                levelCardAnimator.SetTrigger("RevealGold");
                levelNumber.gameObject.SetActive(false);
            }
        }
    }
}