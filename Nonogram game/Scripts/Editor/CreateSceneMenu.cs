using System.Collections;
using System.Collections.Generic;
using UnityEditor;
using UnityEngine;
using UnityEditor.SceneManagement;
using UnityEngine.SceneManagement;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using System.IO;
using System;
using UnityEngine.UI;
using Peak.QuixelLogic.Scripts.Common;

namespace Peak.QuixelLogic.Scripts.Editor
{
    public class CreateSceneMenu : EditorWindow
    {
        public enum Options
        {
            Game = 0,
            UI = 1
        }

        private Options option;

        private Scene newScene;
        private string newSceneName;

        [MenuItem("PEAK/Create empty activator scene")]
        static void Init()
        {
            CreateSceneMenu window = ScriptableObject.CreateInstance<CreateSceneMenu>();
            window.position = new Rect(Screen.width / 2, Screen.height / 4, 500, 150);
            window.ShowPopup();
        }

        void OnGUI()
        {
            if (GUILayout.Button("X")) this.Close();
            EditorGUILayout.LabelField("CREATE SCENE MENU", EditorStyles.helpBox);
            newSceneName = EditorGUILayout.TextField("Type name of scene here:", newSceneName);
            option = (Options)EditorGUILayout.EnumPopup("Type of scene to create:", option);
            if (GUILayout.Button("Create"))
            {
                switch (option)
                {
                    case Options.Game:
                        CreateGameScene();
                        break;

                    case Options.UI:
                        CreateUIScene();
                        break;
                }
                this.Close();
            }
        }

        private void CreateGameScene()
        {
            // Create game scene

            Scene previouslyActiveScene = SceneManager.GetActiveScene();
            newScene = EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Additive);
            EditorSceneManager.SaveScene(newScene, "Assets/" + GameConstants.GameName.NameOfGame + "/Scenes/Game/" + newSceneName + ".unity");

            // Create game scene camera

            GameObject sceneCamera = new GameObject("" + newSceneName + "Camera");
            sceneCamera.AddComponent<Camera>();
            Camera newCamera = sceneCamera.GetComponent<Camera>();
            newCamera.clearFlags = CameraClearFlags.Depth;
            newCamera.cullingMask = -1;
            newCamera.orthographic = true;
            newCamera.orthographicSize = 20;
            newCamera.nearClipPlane = 0.3f;
            newCamera.farClipPlane = 100;
            newCamera.depth = 1;
            newCamera.useOcclusionCulling = true;
            newCamera.allowHDR = false;
            newCamera.allowMSAA = true;

            // Create game scene light

            GameObject sceneLight = new GameObject("" + newSceneName + "Light");
            sceneLight.AddComponent<Light>();
            Light newLight = sceneLight.GetComponent<Light>();
            newLight.type = LightType.Directional;
            newLight.shadows = LightShadows.None;

            // Create game scene activator object

            GameObject sceneActivator = new GameObject("" + newSceneName + "Activator");

            string copyPath = "Assets/" + GameConstants.GameName.NameOfGame + "/Scripts/ScenesLogic/" + sceneActivator.name + ".cs";

            if (File.Exists(copyPath) == false)
            { // do not overwrite
                using (StreamWriter outfile =
                    new StreamWriter(copyPath))
                {
                    outfile.WriteLine("using System.Collections;");
                    outfile.WriteLine("using System.Collections.Generic;");
                    outfile.WriteLine("using UnityEngine;");
                    outfile.WriteLine("using Peak.GameName.Scripts.Common;");
                    outfile.WriteLine("using Peak.GameName.Scripts.Autogenerated;");
                    outfile.WriteLine("");
                    outfile.WriteLine("namespace Peak.GameName.Scripts.ScenesLogic");
                    outfile.WriteLine("{");
                    outfile.WriteLine("    public class " + sceneActivator.name + " : SceneActivationBehaviour<" + sceneActivator.name + "> ");
                    outfile.WriteLine("    {");
                    outfile.WriteLine("        [SerializeField]");
                    outfile.WriteLine("        public Light[] sceneLights;");
                    outfile.WriteLine("");
                    outfile.WriteLine("        [SerializeField]");
                    outfile.WriteLine("        public GameObject featureRoot;");
                    outfile.WriteLine("");
                    outfile.WriteLine("        public override void Initialize()");
                    outfile.WriteLine("        {");
                    outfile.WriteLine("            base.Initialize();");
                    outfile.WriteLine("        }");
                    outfile.WriteLine("");
                    outfile.WriteLine("        public override void Show()");
                    outfile.WriteLine("        {");
                    outfile.WriteLine("            base.Show();");
                    outfile.WriteLine("        }");
                    outfile.WriteLine("");
                    outfile.WriteLine("        public override void Hide()");
                    outfile.WriteLine("        {");
                    outfile.WriteLine("            base.Hide();");
                    outfile.WriteLine("        }");
                    outfile.WriteLine("");
                    outfile.WriteLine("        //public override void SetButtonsEnabled(bool isEnabled)");
                    outfile.WriteLine("        //{");
                    outfile.WriteLine("            //base.SetButtonsEnabled(isEnabled);");
                    outfile.WriteLine("        //}");
                    outfile.WriteLine("    }");
                    outfile.WriteLine("}");
                }

                AssetDatabase.Refresh();
            }

            SceneManager.SetActiveScene(previouslyActiveScene);
        }

        private void CreateUIScene()
        {
            // Create UI scene

            Scene previouslyActiveScene = SceneManager.GetActiveScene();
            newScene = EditorSceneManager.NewScene(NewSceneSetup.EmptyScene, NewSceneMode.Additive);
            EditorSceneManager.SaveScene(newScene, "Assets/" + GameConstants.GameName.NameOfGame + "/Scenes/UI/" + newSceneName + ".unity");

            // Create UI scene camera

            GameObject sceneCamera = new GameObject("" + newSceneName + "Camera");
            sceneCamera.AddComponent<Camera>();
            Camera newCamera = sceneCamera.GetComponent<Camera>();
            newCamera.clearFlags = CameraClearFlags.Depth;
            newCamera.cullingMask = (1 << LayerMask.NameToLayer("UI"));
            newCamera.orthographic = true;
            newCamera.orthographicSize = 20;
            newCamera.nearClipPlane = 0.3f;
            newCamera.farClipPlane = 100;
            newCamera.depth = 1;
            newCamera.useOcclusionCulling = false;
            newCamera.allowHDR = false;
            newCamera.allowMSAA = false;

            // Create UI scene canvas

            GameObject sceneCanvas = new GameObject("MainCanvas");
            sceneCanvas.layer = 5; // UI layer
            sceneCanvas.AddComponent<Canvas>();
            Canvas newCanvas = sceneCanvas.GetComponent<Canvas>();
            newCanvas.renderMode = RenderMode.ScreenSpaceCamera;
            newCanvas.worldCamera = newCamera;
            newCanvas.planeDistance = 10;

            sceneCanvas.AddComponent<CanvasScaler>();
            CanvasScaler cc = sceneCanvas.GetComponent<CanvasScaler>();
            cc.uiScaleMode = CanvasScaler.ScaleMode.ScaleWithScreenSize;
            cc.referenceResolution = new Vector2(750, 1334);
            cc.screenMatchMode = CanvasScaler.ScreenMatchMode.MatchWidthOrHeight;
            cc.matchWidthOrHeight = 0;

            sceneCanvas.AddComponent<GraphicRaycaster>();
            GraphicRaycaster gr = sceneCanvas.GetComponent<GraphicRaycaster>();

            // Create background image

            GameObject canvasBGImageObject = new GameObject("BackgroundImage");
            canvasBGImageObject.AddComponent<Image>();
            Image image = canvasBGImageObject.GetComponent<Image>();
            image.color = new Color32(255, 255, 255, 50);

            canvasBGImageObject.transform.parent = sceneCanvas.transform;
            canvasBGImageObject.AddComponent<RectTransform>();
            RectTransform rt = canvasBGImageObject.GetComponent<RectTransform>();
            rt.anchorMin = new Vector2(0, 0);
            rt.anchorMax = new Vector2(1, 1);
            rt.pivot = new Vector2(0.5f, 0.5f);
            rt.localScale = new Vector3(1, 1, 1);
            rt.anchoredPosition3D = new Vector3(0, 0, 0);
            rt.offsetMax = rt.offsetMin = rt.anchoredPosition = new Vector2(0, 0);

            // Create UI scene activator object

            GameObject sceneActivator = new GameObject("" + newSceneName + "Activator");

            string copyPath = "Assets/" + GameConstants.GameName.NameOfGame + "/Scripts/ScenesLogic/" + sceneActivator.name + ".cs";

            if (File.Exists(copyPath) == false)
            { // do not overwrite
                using (StreamWriter outfile =
                    new StreamWriter(copyPath))
                {
                    outfile.WriteLine("using System.Collections;");
                    outfile.WriteLine("using System.Collections.Generic;");
                    outfile.WriteLine("using UnityEngine;");
                    outfile.WriteLine("using Peak.GameName.Scripts.Common;");
                    outfile.WriteLine("using Peak.GameName.Scripts.Autogenerated;");
                    outfile.WriteLine("");
                    outfile.WriteLine("namespace Peak.GameName.Scripts.ScenesLogic");
                    outfile.WriteLine("{");
                    outfile.WriteLine("    public class " + sceneActivator.name + " : SceneActivationBehaviour<" + sceneActivator.name + "> ");
                    outfile.WriteLine("    {");
                    outfile.WriteLine("        public override void Initialize()");
                    outfile.WriteLine("        {");
                    outfile.WriteLine("            base.Initialize();");
                    outfile.WriteLine("        }");
                    outfile.WriteLine("");
                    outfile.WriteLine("        public override void Show()");
                    outfile.WriteLine("        {");
                    outfile.WriteLine("            base.Show();");
                    outfile.WriteLine("        }");
                    outfile.WriteLine("");
                    outfile.WriteLine("        public override void Hide()");
                    outfile.WriteLine("        {");
                    outfile.WriteLine("            base.Hide();");
                    outfile.WriteLine("        }");
                    outfile.WriteLine("");
                    outfile.WriteLine("        //public override void SetButtonsEnabled(bool isEnabled)");
                    outfile.WriteLine("        //{");
                    outfile.WriteLine("            //base.SetButtonsEnabled(isEnabled);");
                    outfile.WriteLine("        //}");
                    outfile.WriteLine("    }");
                    outfile.WriteLine("}");
                }

                AssetDatabase.Refresh();
            }

            SceneManager.SetActiveScene(previouslyActiveScene);
        }
    }
}


