using System.Collections;
using System.Collections.Generic;
using Peak.QuixelLogic.Scripts.Settings;
using Peak.QuixelLogic.Scripts.Settings.Autogenerated;
using UnityEngine;

namespace Peak.QuixelLogic.Scripts.Common
{
    /// <summary>
    /// API for texts and sounds management
    /// </summary>
    public sealed class SoundController : MonoBehaviour
    {
        /// <summary>
        /// Localisation setting
        /// </summary>
        [SerializeField]
        private LocalisationSettings settings;

        /// <summary>
        /// Playing all the time background music source
        /// </summary>
        [SerializeField]
        private AudioSource backgroundSource;

        /// <summary>
        /// Playing all the time ambient background music source
        /// </summary>
        [SerializeField]
        private AudioSource backgroundAdditionalSource;

        /// <summary>
        /// Some important events' SFXes
        /// </summary>
        [SerializeField]
        private AudioSource eventSource;

        /// <summary>
        /// Different less important long played SFXes
        /// </summary>
        [SerializeField]
        private AudioSource notificationSource;

        /// <summary>
        /// Not important sounds like taps
        /// </summary>
        [SerializeField]
        private AudioSource expandableSource;

        [SerializeField]
        private float fadeInOutTime = 0.5f;

#if UNITY_EDITOR
        [SerializeField]
        private bool showSoundLogs;
#endif

        /// <summary>
        /// Localisation singleton 
        /// </summary>
        public static SoundController Instance { get; private set; }

        /// <summary>
        /// Shows if background music sources are enabled
        /// </summary>
        public bool IsMusicEnabled => backgroundSource.enabled;

        /// <summary>
        /// Shows if general sound sources are enabled
        /// </summary>
        public bool IsSoundEnabled => eventSource.enabled;

        //private SystemLanguage currentLanguage;
        private SoundSettingsKey currentBackgroundSoundKey;
        private SoundSettingsKey currentBackgroundAmbientSoundKey;

        //private readonly Dictionary<SystemLanguage, SoundSettings> sounds = new Dictionary<SystemLanguage, SoundSettings>();

        #region Unity Callbacks

        private void Awake()
        {
            if (Instance)
            {
                Debug.LogWarning("[LOCALISATION] LocalisationController duplicate instantiation.");
            }
            else
            {
                Instance = this;
            }

            InitializeSoundKeys();
            InitializeSounds();
        }

        public void PlayBackgroundMusic()
        {
            // plays music upon load
            //PlayAudioClip(SoundSettingsKey.MUSIC);
            backgroundSource.Play();
        }

        private void InitializeSounds()
        {
            bool shouldShowMusicDisabled =
                PlayerPrefs.HasKey(GameConstants.SettingKeys.GlobalMusicEnabled)
                && PlayerPrefs.GetInt(GameConstants.SettingKeys.GlobalMusicEnabled) == 0;

            if (shouldShowMusicDisabled)
            {
                ToggleMusic();
            }

            bool shouldShowSfxDisabled =
                PlayerPrefs.HasKey(GameConstants.SettingKeys.GlobalSfxEnabled)
                && PlayerPrefs.GetInt(GameConstants.SettingKeys.GlobalSfxEnabled) == 0;

            if (shouldShowSfxDisabled)
            {
                ToggleSfx();
            }
        }

        private void InitializeSoundKeys()
        {
            // initialise
            foreach (SoundSettings soundSetting in settings.Sound)
            {
                foreach (AudioRecordSettings record in soundSetting.AudioRecords)
                {
                    soundSetting.CachedRecords[record.Key] = record;
                }
            }
        }

        public bool ToggleMusic(bool updatePrefs = false)
        {
            bool isEnabled = backgroundSource.enabled ^= true;
            backgroundAdditionalSource.enabled = isEnabled;
            if (updatePrefs)
            {
                PlayerPrefs.SetInt(GameConstants.SettingKeys.GlobalMusicEnabled, isEnabled ? 1 : 0);
            }
            print($"[AUDIO] Music is enabled {isEnabled} - save update: {updatePrefs}");

            return isEnabled;
        }

        public void MuteMusic(bool mute)
        {
            print($"[AUDIO] Muting music for AD {mute}");
            if (mute)
            {
                backgroundSource.mute = true;
                return;
            }
            else
            {
                backgroundSource.mute = false;
                return;
            }
        }

        public bool ToggleSfx(bool updatePrefs = false)
        {
            bool isEnabled = eventSource.enabled ^= true;
            notificationSource.enabled = isEnabled;
            expandableSource.enabled = isEnabled;
            if (updatePrefs)
            {
                PlayerPrefs.SetInt(GameConstants.SettingKeys.GlobalSfxEnabled, isEnabled ? 1 : 0);
            }
            print($"Sound is enabled {isEnabled} - save update: {updatePrefs}");

            return isEnabled;
        }

        #endregion

        /// <summary>
        /// Returns localised audio
        /// </summary>
        public AudioRecordSettings GetAudioClip(SoundSettingsKey key)
        {
            string clipName = SoundSettingsValue.Mapping[key];

            if (string.IsNullOrEmpty(clipName))
            {
                Debug.Log($"[AUDIO] Skipping sound: {key}");
                return null;
            }

            SoundSettings soundSettings = settings.Sound[0];

            if (!soundSettings.CachedRecords.ContainsKey(clipName))
            {
                Debug.LogWarning($"[AUDIO] Missing sound: {key}");
                return null;
            }

            return soundSettings.CachedRecords[clipName];
        }

        /// <summary>
        /// Returns localised audio
        /// </summary>
        /// <param name="twoNinethPitchCount">0 is pitch=1.00, 9 is pitch=3.00, -5 is pitch=-0.11, -4 is pitch=0.11</param>
        public void PlayAudioClip(SoundSettingsKey key, int twoNinethPitchCount = 0)
        {
            AudioRecordSettings record = GetAudioClip(key);

            if (record == null)
            {
                return;
            }

            AudioSource source;

            switch (record.SourceGroup)
            {
                case AudioSourceGroup.BackgroundAmbient:
                    if (currentBackgroundAmbientSoundKey == key)
                    {
                        return;
                    }

                    source = backgroundAdditionalSource;
                    currentBackgroundAmbientSoundKey = key;
                    break;

                case AudioSourceGroup.Background:
                    if (currentBackgroundSoundKey == key)
                    {
                        return;
                    }

                    source = backgroundSource;
                    currentBackgroundSoundKey = key;
                    break;

                case AudioSourceGroup.Event:
                    source = eventSource;
                    break;

                case AudioSourceGroup.Notification:
                    source = notificationSource;
                    break;

                case AudioSourceGroup.Expendable:
                    source = expandableSource;
                    break;

                default:
#if UNITY_EDITOR
                    if (showSoundLogs)
                    {
                        Debug.LogWarning(
                            $"[AUDIO] Cannot find '{record.SourceGroup}' " +
                            $"source group for '{key}' " +
                            $"= '{SoundSettingsValue.Mapping[key]}'");
                    }
#endif
                    return;
            }

            if (record.ShouldNotPlayInARow && source.isPlaying)
            {
                bool isSameClip = source.clip == record.AudioClip;
                bool isSamePitch = Mathf.Approximately(source.pitch, 1f + 2f * twoNinethPitchCount / 9f);
                if (isSameClip && isSamePitch)
                {
                    // do  not play the same sound
                    return;
                }
            }

            source.clip = record.AudioClip;
            source.pitch = 1f + 2f * twoNinethPitchCount / 9f;

            if (source.enabled)
            {
                if (record.CanBeInterrupted)
                {
                    if (record.SourceGroup == AudioSourceGroup.Background ||
                       record.SourceGroup == AudioSourceGroup.BackgroundAmbient)
                    {
                        Debug.Log("Start sound fade coroutinue - " + key);
                        StartCoroutine(fadeSound(source, fadeInOutTime));
                    }
                    else
                    {
                        // stop old and play new
                        //Debug.Log("Start sound, stop old - " + key);
                        //#if UNITY_ANDROID

                        StartCoroutine(playSound(source));
                        //#else
                        //                        source.Stop();
                        //                        source.Play();
                        //#endif
                    }
                }
                else
                {
                    // play new async
                    //Debug.Log("Start new soun - " + key);
                    SoundFactory.Instance.PlayAsCopy(source);
                }

#if UNITY_EDITOR
                if (showSoundLogs)
                {
                    Debug.Log(
                        $"[AUDIO] Playing sound '{key}' " +
                        $"= '{SoundSettingsValue.Mapping[key]}'" +
                        $" as '{source.name}'");
                }
#endif
            }
        }

        private IEnumerator playSound(AudioSource source)
        {
            yield return new WaitForEndOfFrame();
            source.Stop();
            source.Play();
        }

        private IEnumerator fadeSound(AudioSource source, float duration)
        {
            Debug.Log("fade coroutinue 1");
            //yield return new WaitForEndOfFrame();

            float fadeOutTime = source.isPlaying ? duration : 0f;
            float fadeInTime = duration;
            float startVolume = source.isPlaying ? source.volume : 1f;
            while (fadeOutTime > 0)
            {

                float percentage = fadeOutTime / duration;
                fadeOutTime -= Time.deltaTime;
                source.volume = startVolume * percentage;
                yield return new WaitForEndOfFrame();
            }
            Debug.Log("fade coroutinue 2");
            if (source.volume > 0)
            {
                source.volume = 0;
            }
            source.Stop();
            Debug.Log("fade coroutinue 3");

            source.Play();
            Debug.Log("fade coroutinue 4");
            while (fadeInTime > 0)
            {
                float percentage = fadeInTime / duration;
                float invertedPercentage = 1.0f - percentage;
                fadeInTime -= Time.deltaTime;
                source.volume = startVolume * invertedPercentage;
                yield return new WaitForEndOfFrame();
            }
            if (source.volume < startVolume)
            {
                source.volume = startVolume;
            }
            Debug.Log("fade coroutinue 5");

            yield return null;
        }
    }
}