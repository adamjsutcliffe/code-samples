
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Game;
using Peak.QuixelLogic.Scripts.Game.Gameplay;
using UnityEngine;
using UnityEngine.Analytics;
using UnityEngine.EventSystems;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using Peak.QuixelLogic.Scripts.Autogenerated;
using GoogleMobileAdsMediationTestSuite.Api;
#if UNITY_IOS
using UnityEngine.iOS;
#endif
#if CHEATS
using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
#endif

namespace Peak.QuixelLogic.Scripts.Common
{
    public sealed class CheatController : MonoBehaviour
    {
        [Header("Main controllers")]
        [SerializeField]
        private GameController gameController;

        [SerializeField]
        private ServerController serverController;

        [SerializeField]
        private AnalyticsController analyticsController;

        [SerializeField]
        private EventSystem input;

#if CHEATS

        private enum CheatTab
        {
            Closed = 0,
            Other,
            Ftue,
            Levels,
            Framerate,
            Analytics,
            Events,
            Ads,
            Haptics
        }

        #region UI

        private bool shouldShowLevels;
        private bool shouldShowCoins;
        private bool shouldShowLetters;
        private bool shouldShowBooks;

        private GUIStyle whiteStyle;
        private GUIStyle blackStyle;

        private Vector2 scrollPosition;

        private CheatTab tab = CheatTab.Closed;

        private bool debugMode;
        private void Awake()
        {
#if CHEATS
            debugMode = true;
#else
            debugMode = false;
#endif

            if (!debugMode)
            {
                return;
            }
            Debug.Log($"[CHEATS][SETUP] ACTIVE");
            whiteStyle = whiteStyle ?? new GUIStyle
            {
                active = new GUIStyleState { background = Texture2D.whiteTexture },
                normal = new GUIStyleState { background = Texture2D.whiteTexture }
            };

            blackStyle = blackStyle ?? new GUIStyle
            {
                active = new GUIStyleState { background = Texture2D.blackTexture },
                normal = new GUIStyleState { background = Texture2D.blackTexture }
            };
        }

        private void OnGUI()
        {
            if (!debugMode)
            {
                return;
            }
            GUI.color = Color.white;
            GUI.skin.label.fontSize = (int)(0.02f * Screen.height);
            GUI.skin.button.fontSize = (int)(0.02f * Screen.height);
            GUI.skin.textField.fontSize = (int)(0.02f * Screen.height);
            GUI.skin.verticalScrollbar.fixedWidth = 0.04f * Screen.width;
            GUI.skin.horizontalScrollbar.fixedHeight = 0.04f * Screen.height;

            if (tab != CheatTab.Closed)
            {
                GUILayout.BeginArea(new Rect(0, 0, Screen.width, Screen.height), whiteStyle);

                DrawCheatMenuActive();

                switch (tab)
                {
                    case CheatTab.Events:
                        DrawEvents();
                        break;

                    case CheatTab.Other:
                        DrawOther();
                        break;

                    case CheatTab.Framerate:
                        DrawFramerate();
                        break;

                    case CheatTab.Analytics:
                        DrawAnalytics();
                        break;
                    case CheatTab.Ads:
                        DrawAds();
                        break;
#if UNITY_IOS
                    case CheatTab.Haptics:
                        DrawHaptics();
                        break;
#endif
                }

                GUILayout.EndArea();
            }
            else
            {
                DrawCheatMenuDisabled();
            }
        }

        private void DrawCheatMenuDisabled()
        {
            GUILayout.BeginHorizontal();
            GUILayout.Space(Screen.width / 2 - 100);
            GUILayout.BeginVertical();
            GUILayout.Space(150);
            if (GUILayout.Button(" [  CHEATS ] "))
            {
                ShowCheatMenu();
            }

            GUILayout.EndHorizontal();
        }

        private void DrawCheatMenuActive()
        {
            GUILayout.BeginHorizontal();

            if (GUILayout.Button(" [ HIDE CONSOLE ] "))
            {
                HideCheatMenu();
            }

            if (GUILayout.Button(" = Levels  = "))
            {
                tab = CheatTab.Levels;
            }

            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();

            if (GUILayout.Button(" = PlayerPrefs = "))
            {
                tab = CheatTab.Other;
            }
            if (GUILayout.Button(" = FTUE = "))
            {
                tab = CheatTab.Ftue;
            }

            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();

            if (GUILayout.Button(" =  Analytics Info  = "))
            {
                tab = CheatTab.Analytics;
            }

            if (GUILayout.Button(" =  Analytics Events  = "))
            {
                tab = CheatTab.Events;
            }

            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();

            if (GUILayout.Button(" = vSync and Framerate settings  = "))
            {
                tab = CheatTab.Framerate;
            }

            GUILayout.EndHorizontal();
            GUILayout.BeginHorizontal();
            if (GUILayout.Button(" =  Ads Console  = "))
            {
                tab = CheatTab.Ads;
            }

            GUILayout.EndHorizontal();

            GUILayout.BeginHorizontal();
            if (GUILayout.Button(" =  HAPTICS  = "))
            {
                tab = CheatTab.Haptics;
            }

            GUILayout.EndHorizontal();
        }

        private void HideCheatMenu()
        {
            tab = CheatTab.Closed;

            // unblock UI
            input.enabled = true;
        }

        private void ShowCheatMenu()
        {
            tab = CheatTab.Other;

            // block UI
            input.enabled = false;
        }



        private void DrawOther()
        {
            GUI.color = Color.black;

            GUI.color = Color.red;

            GUILayout.Label("NOTE! You must restart the app in order to apply these changes!");

            GUI.color = Color.white;


            if (GUILayout.Button("CLEAR ALL PREFS!"))
            {
                PlayerPrefs.DeleteAll();
                Debug.Log("Unity Preferences are cleared!");
            }


            if (GUILayout.Button("Reset Player"))
            {
                PlayerPrefs.DeleteKey(ServerController.PlayerDataPrefsName);
            }

            if (gameController.Player == null)
            {
                GUILayout.Label("Player data is not available now.");
            }
            else
            {
                GUI.color = Color.red;
                GUILayout.Label("------------");
                GUILayout.Label("NOTE! UI elements (text, buttons, numbers) are NOT updated!.\n" +
                                "If you need them, please restart the app!");

                GUILayout.Label("------------");
                GUILayout.Label($"Player Main Level Index: {gameController.Player.MainPuzzleIndex}");
                GUILayout.Label($"Player Level: {gameController.Player.GroupIndex}");
                GUILayout.Label($"Player Stars: {gameController.Player.Stars}");
                GUILayout.Label($"Player Coins: {gameController.Player.Coins}");
                GUILayout.Label("------------");

                if (PlayerPrefs.GetString(Constants.Languages.CurrentLanguage) == "")
                {
                    GUILayout.Label($"Change language, current language is: English (default)");
                }
                else GUILayout.Label($"Change language, current language is: {PlayerPrefs.GetString(Constants.Languages.CurrentLanguage, "")}");
                GUILayout.Label("NOTE - app needs to be restarted for new languages to take effect ");

                GUI.color = Color.white;
                GUILayout.BeginHorizontal();

                if (GUILayout.Button("[ EN ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "en");
                }

                if (GUILayout.Button("[ FR ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "fr");
                }

                if (GUILayout.Button("[ IT ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "it");
                }

                GUILayout.EndHorizontal();
                GUILayout.BeginHorizontal();

                if (GUILayout.Button("[ DE ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "de");
                }

                if (GUILayout.Button("[ ES ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "es");
                }

                if (GUILayout.Button("[ PT-BR ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "pt-br");
                }

                GUILayout.EndHorizontal();
                GUILayout.BeginHorizontal();

                if (GUILayout.Button("[ JP ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "jp");
                }

                if (GUILayout.Button("[ ZH-S ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "zh-s");
                }

                if (GUILayout.Button("[ ZH-T ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "zh-t");
                }

                GUILayout.EndHorizontal();
                GUILayout.BeginHorizontal();

                if (GUILayout.Button("[ IN ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "in");
                }

                if (GUILayout.Button("[ RU ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "ru");
                }

                if (GUILayout.Button("[ KR ]"))
                {
                    PlayerPrefs.SetString(Constants.Languages.CurrentLanguage, "kr");
                }

                GUILayout.EndHorizontal();

                GUILayout.BeginHorizontal();

                if (GUILayout.Button($"Add 1000 coins! (coins: {gameController.Player.Coins})"))
                {
                    gameController.Player.Coins += 1000;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Reset coins to 0 (coins: {gameController.Player.Coins})"))
                {
                    gameController.Player.Coins = 0;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                GUILayout.EndHorizontal();

                GUILayout.BeginHorizontal();

                if (GUILayout.Button($"Increment main puzzle index: {gameController.Player.MainPuzzleIndex})"))
                {
                    gameController.Player.MainPuzzleIndex++;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Decrement main puzzle index: {gameController.Player.MainPuzzleIndex})"))
                {
                    gameController.Player.MainPuzzleIndex--;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                GUILayout.EndHorizontal();

                GUILayout.BeginHorizontal();

                if (GUILayout.Button($"Puzzle index plus 10"))
                {
                    gameController.Player.MainPuzzleIndex += 10;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Puzzle index minus 10"))
                {
                    gameController.Player.MainPuzzleIndex -= 10;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                GUILayout.EndHorizontal();

                if (GUILayout.Button($"go to last level to test game completion!"))
                {
                    gameController.Player.MainPuzzleIndex = 572;
                    gameController.Player.GameComplete = false;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Pass FTUE"))
                {
                    gameController.Player.FtuePassed = true;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Uncomplete game"))
                {
                    gameController.Player.GameComplete = false;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Minus 1 film (film: {gameController.Player.Film})"))
                {
                    gameController.Player.Film -= 1;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Add 1 film (film: {gameController.Player.Film})"))
                {
                    gameController.Player.Film += 1;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Reset game level to 0 (level: {gameController.Player.GroupIndex})"))
                {
                    gameController.Player.GroupIndex = 0;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

                if (GUILayout.Button($"Show grid puzzle name debug in bottom corner"))
                {
                    gameController.DisplayDebugText = true;
                }

                if (GUILayout.Button($"New location = false"))
                {
                    gameController.Player.NewLocation = false;
                    serverController.PersistPlayerProgress(gameController.Player);
                }

            }
        }

        private void DrawFramerate()
        {
            GUI.color = Color.black;

            GUILayout.Label("Target framerate: " + Application.targetFrameRate);
            foreach (int tfps in new[] { -1, 30, 60, 120 })
            {
                if (GUILayout.Button($"Set {tfps}", GUILayout.Width(70)))
                {
                    Application.targetFrameRate = tfps;
                }
            }

            GUILayout.Label("Vertical sync.: " + QualitySettings.vSyncCount);
            foreach (int vsync in new[] { 0, 1, 2, 4 })
            {
                if (GUILayout.Button($"Set {vsync}", GUILayout.Width(70)))
                {
                    QualitySettings.vSyncCount = vsync;
                }
            }

            GUILayout.TextArea("The number of VSyncs that should pass between each frame. Use 'Don't Sync' (0) to not wait for VSync");

            GUILayout.TextArea("Additionally if the QualitySettings.vSyncCount property is set, the targetFrameRate will be ignored " +
                               "and instead the game will use the vSyncCount and the platform's default render rate to determine the " +
                               "target frame rate. For example, if the platform's default render rate is 60 frames per second and " +
                               "vSyncCount is set to 2, the game will target 30 frames per second.");
        }

        private void DrawAnalytics()
        {
            GUI.color = Color.black;

            GUILayout.Label("Application version: " + Application.version);

            GUI.color = Color.white;
            GUILayout.TextArea("Applicaition version should be manually increased BEFORE publishing. " +
                               "Otherwise, it will send incorrect events!");
            GUI.color = Color.black;

            GUILayout.Label("USER    : " + SceneActivationBehaviour<GameLogicActivator>.Instance.AnalyticsController.PlayerGuid);

            GUI.color = Color.white;
            GUILayout.TextArea("USER is a debug-only parameter used to filter out test events!");
            GUI.color = Color.black;

            GUILayout.Label("UAID    : " + Guid.Parse(AnalyticsSessionInfo.userId));
            GUILayout.Label("SESSION : " + AnalyticsSessionInfo.sessionId);

            GUI.color = Color.white;
            GUILayout.TextArea("UAID is used by Unity Analytics.");
            GUI.color = Color.black;

            GUILayout.Label("Application ID: " + Application.identifier);
            GUILayout.Label("Build with Unity version: " + Application.unityVersion);
            GUILayout.Label("Cloud ID: " + Application.cloudProjectId);
            GUILayout.Label("Build ID: " + Application.buildGUID);

            GUILayout.Space(10);
            GUILayout.Label("There're some last analytic events sent to Unity:");

            //foreach (string log in SceneActivationBehaviour<GameLogicActivator>.Instance.AnalyticsController.Logs)
            //{
            //    GUILayout.TextArea(log, blackStyle);
            //}
        }

        private void DrawEvents()
        {
            GUI.color = Color.black;

            GUILayout.Label("Analytics Events test");

            GUI.color = Color.white;
            GUILayout.TextArea("Select an event to fire it then check the info tab to see fire logs. ");

            GUI.color = Color.black;

            GUILayout.Space(10);

            GUILayout.Label("Registration Event");

            GUI.color = Color.white;

            GUILayout.Space(10);

            if (GUILayout.Button($"Test device data"))
            {
                analyticsController.SendDeviceData();
            }

            GUI.color = Color.black;

            GUILayout.Space(10);

            GUILayout.Label("Screen Event");

            GUI.color = Color.white;

            GUILayout.Space(10);

            //if (GUILayout.Button($"Test screen change"))
            //{
            //    analyticsController.SendScreenChangeEvent(GameWindow.LoadingMenu, GameWindow.MainMenu); //SendDeviceData();
            //}

            GUI.color = Color.black;

            GUILayout.Space(20);

            GUILayout.Label("Game Events");

            GUI.color = Color.white;
            GUILayout.TextArea("Game event ID is ONLY set on start event.");

            GUILayout.Space(10);

            GUI.color = Color.white;

            if (GUILayout.Button($"Game Start"))
            {
                analyticsController.SendGameData(GameSourceType.Start, null);
            }

            GUILayout.Space(10);

            if (GUILayout.Button($"Game Pause"))
            {
                analyticsController.SendGameData(GameSourceType.Pause, null);
            }

            GUILayout.Space(10);

            if (GUILayout.Button($"Game Resume"))
            {
                analyticsController.SendGameData(GameSourceType.Resume, null);
            }

            GUILayout.Space(10);

            if (GUILayout.Button($"Game Quit"))
            {
                analyticsController.SendGameData(GameSourceType.Quit, null);
            }

            GUILayout.Space(10);

            if (GUILayout.Button($"Game Finish - Success"))
            {
                analyticsController.SendGameData(GameSourceType.Finish, null);
            }

            GUI.color = Color.black;

            GUILayout.Label("Ad Events");

            GUI.color = Color.white;


            GUILayout.Space(20);

            if (GUILayout.Button("Request - Banner"))
            {
                analyticsController.SendAdResult(AdResultType.Requested, AdType.Banner, AdSourceType.NotSet);
            }

            GUILayout.Space(10);

            if (GUILayout.Button("Started - Interstitial"))
            {
                analyticsController.SendAdResult(AdResultType.Started, AdType.Interstitial, AdSourceType.NotSet);
            }

            GUILayout.Space(10);

            if (GUILayout.Button("Watched - RewardedVideo"))
            {
                analyticsController.SendAdResult(AdResultType.Watched, AdType.RewardedVideo, AdSourceType.NotSet);
            }

            GUILayout.Space(10);

            if (GUILayout.Button("Error - Banner"))
            {
                analyticsController.SendAdResult(AdResultType.Error, AdType.Banner, AdSourceType.NotSet);
            }

            GUILayout.Space(10);

            if (GUILayout.Button("Aborted - Interstitial"))
            {
                analyticsController.SendAdResult(AdResultType.Aborted, AdType.Interstitial, AdSourceType.NotSet); ;
            }


        }

        private void DrawAds()
        {
            GUI.color = Color.black;
            GUILayout.Label("ADMOB Ad Console");
            if (GUILayout.Button("Show Console"))
            {
                Debug.Log("Show ADMOB Console!");
#if UNITY_ANDROID
    string appId = "ca-app-pub-1582776119070207~5242745012";
#elif UNITY_IPHONE
                string appId = "ca-app-pub-1582776119070207~9838890482";
#else
    string appId = "unexpected_platform";
#endif

                MediationTestSuite.Show(appId);
            }
        }
#if UNITY_IOS
        private void DrawHaptics()
        {
            HapticFeedback hf = new HapticFeedback();

            GUI.color = Color.black;
            GUILayout.Label("HAPTICS");

            GUI.color = Color.white;

            GUILayout.Space(20);

            GUILayout.BeginHorizontal();

            if (GUILayout.Button("=  LIGHT  ="))
            {
                hf.LightStyle();
            }

            if (GUILayout.Button("=  MEDIUM  ="))
            {
                hf.MediumStyle();
            }

            if (GUILayout.Button("=  HEAVY  ="))
            {
                hf.HeavyStyle();
            }

            GUILayout.EndHorizontal();

            GUILayout.Space(20);

            if (GUILayout.Button("IMPACT"))
            {
                hf.ImpactOccurred();
            }

            GUILayout.Space(10);

            if (GUILayout.Button("SELECTION"))
            {
                hf.SelectionOccurred();
            }

            GUILayout.Space(10);

            if (GUILayout.Button("SUCCESS"))
            {
                hf.SelectionOccurred();
            }

            GUILayout.Space(10);

            if (GUILayout.Button("WARNING"))
            {
                hf.SelectionOccurred();
            }

            GUILayout.Space(10);

            if (GUILayout.Button("ERROR"))
            {
                hf.SelectionOccurred();
            }
        }
#endif
        #endregion

#endif
    }
}