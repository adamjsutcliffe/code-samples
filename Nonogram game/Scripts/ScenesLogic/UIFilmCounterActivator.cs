using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using Peak.QuixelLogic.Scripts.Settings;
using System;
using System.Globalization;
using Peak.QuixelLogic.Scripts.Game;
using TMPro;
using JetBrains.Annotations;
using System.Text;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class UIFilmCounterActivator : SceneActivationBehaviour<UIFilmCounterActivator>
    {
        [SerializeField]
        private GlobalSettings globalSettings;

        [SerializeField]
        private GameObject dimImage;

        [SerializeField]
        private Animator gameStartAnimator;

        [SerializeField]
        private TextMeshProUGUI filmCounterText;

        [SerializeField]
        private TextMeshProUGUI timeCounterText;

        public TextMeshProUGUI TimeCounterText => timeCounterText;

        private bool filmIsReplenishing { get; set; }

        private int previousSecondsTime;

        public TimeSpan TimeSpanToNextFilm => timeSpanToNextFilm;
        private TimeSpan timeSpanToNextFilm { get; set; }

        private DateTime timeToNextFilm { get; set; }

        private int currentPlayerFilm { get; set; }

        // string buffer
        private readonly StringBuilder stringBuffer = new StringBuilder();

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
        }

        public override void Hide()
        {
            base.Hide();
        }

        public void ShowDim(bool show)
        {
            dimImage.SetActive(show);
        }

        private string GetLastDayOpened()
        {
            return PlayerPrefs.GetString(GameConstants.FilmFeature.DayLastOpened, "");
        }

        private void SetTodayAsLastDayOpened()
        {
            string dateToday = DateTime.Today.ToString("yyyyMMddHHmmss", CultureInfo.CurrentCulture);
            PlayerPrefs.SetString(GameConstants.FilmFeature.DayLastOpened, dateToday);

            filmIsReplenishing = false;
            PlayerPrefs.DeleteKey(GameConstants.FilmFeature.DateTimeFilmLastSpent);
            SetDefaultDetails();
        }

        public void TryToGiveDailyReward(Player player)
        {
            string lastAward = GetLastDayOpened();

            if (lastAward.Equals(""))
            {
                SetTodayAsLastDayOpened();
            }
            else
            {
                DateTime lastAwardedDay = DateTime.ParseExact(lastAward, "yyyyMMddHHmmss", CultureInfo.CurrentCulture); // get last awarded day
                DateTime today = DateTime.Today; // get current day at midnight

                double hoursDifference = today.Subtract(lastAwardedDay).TotalHours;

                if (hoursDifference >= 24)
                {
                    // award film
                    AwardDailyFilm(player);
                    return;
                }
                else return;
            }
        }

        private void AwardDailyFilm(Player player)
        {
            SceneActivationBehaviour<PopUpFilmActivator>.Instance.ShowDailyRewardPanel(player, () =>
            {
                SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.FilmGrantedHandler(globalSettings.Film.MaxFilmCount, (playerFilm) =>
                    {
                        SetFilmCounterText(playerFilm);
                        SetTodayAsLastDayOpened();

                        SceneActivationBehaviour<GameLogicActivator>.Instance.AnalyticsController.FilmEarned(globalSettings.Film.MaxFilmCount, FilmSourceType.DailyReward);
                    });
            });
        }

        public void SetFilmCounterText(int filmCount)
        {
            currentPlayerFilm = filmCount;
            filmCounterText.text = filmCount.ToString();
        }

        private string GetNextFilmTime()
        {
            return PlayerPrefs.GetString(GameConstants.FilmFeature.DateTimeFilmLastSpent, "");
        }

        private void SetNextFilmTime()
        {
            string nextFilmTime = timeToNextFilm.ToString("yyyyMMddHHmmss", CultureInfo.CurrentCulture);
            PlayerPrefs.SetString(GameConstants.FilmFeature.DateTimeFilmLastSpent, nextFilmTime);
        }

        public void UpdateFilmOnAppRestore()
        {
            string timeLastFilmSpent = GetNextFilmTime();

            if (timeLastFilmSpent.Equals(""))
            {
                filmIsReplenishing = false;
                PlayerPrefs.DeleteKey(GameConstants.FilmFeature.DateTimeFilmLastSpent);
                SetDefaultDetails();
                return;
            }
            else
            {
                DateTime nextFilmGiftTime = DateTime.ParseExact(timeLastFilmSpent, "yyyyMMddHHmmss", CultureInfo.CurrentCulture); // get last spend time for film
                DateTime now = DateTime.Now; // get current date and time

                double secondsDifference = now.Subtract(nextFilmGiftTime).TotalSeconds;

                if (secondsDifference >= 0) // if seconds are positive, we are past the next award
                {
                    // work out how many 15 mins, award that many films
                    float wholeFilmCount = 1 + Mathf.Floor((float)secondsDifference / globalSettings.Film.FilmAwardTimerInSeconds);
                    float remainingTime = (globalSettings.Film.FilmAwardTimerInSeconds) - (float)secondsDifference % globalSettings.Film.FilmAwardTimerInSeconds;

                    SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.FilmGrantedHandler((int)wholeFilmCount, (playerFilm) =>
                    {
                        SetFilmCounterText(playerFilm);

                        if (playerFilm != globalSettings.Film.MaxFilmCount)
                        {
                            filmIsReplenishing = true;
                            timeToNextFilm = DateTime.Now.AddSeconds(remainingTime);
                            SetNextFilmTime();
                            timeSpanToNextFilm = timeToNextFilm - DateTime.Now;
                        }
                        else
                        {
                            filmIsReplenishing = false;
                            PlayerPrefs.DeleteKey(GameConstants.FilmFeature.DateTimeFilmLastSpent);
                            SetDefaultDetails();

                            return;
                        }
                    });
                }
                else
                {
                    filmIsReplenishing = true;
                    timeSpanToNextFilm = nextFilmGiftTime - DateTime.Now;
                }
            }
        }

        public void SpendFilm(int playerFilm)  // Save Time Of Last Film Spent ?
        {
            SetFilmCounterText(playerFilm);

            if (!filmIsReplenishing)
            {
                filmIsReplenishing = true;
                timeToNextFilm = DateTime.Now.AddSeconds(globalSettings.Film.FilmAwardTimerInSeconds);

                // save next film time string to prefs
                SetNextFilmTime();

                timeSpanToNextFilm = timeToNextFilm - DateTime.Now;
            }
            else
            {
                // film is already replenishing
                return;
            }
        }

        private void Update()
        {
            if (filmIsReplenishing)
            {
                if (timeSpanToNextFilm.TotalSeconds > 0)
                {
                    timeSpanToNextFilm -= TimeSpan.FromSeconds(Time.deltaTime);

                    // update details
                    UpdateDetailsWithTimeText();
                }
                else
                {
                    // time is up
                    // award film
                    GrantFilm();
                }
            }
        }

        public void GrantFilm(int filmReward = 1)
        {
            //if (filmReward != 1)
            //{
            //    SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.FilmGrantedHandler(filmReward, (playerFilm) =>
            //    {
            //        SetFilmCounterText(playerFilm);

            //        if (playerFilm >= globalSettings.Film.MaxFilmCount)
            //        {
            //            filmIsReplenishing = false;
            //            PlayerPrefs.DeleteKey(GameConstants.FilmFeature.DateTimeFilmLastSpent);
            //            SetDefaultDetails();
            //            return;
            //        }
            //        else return;
            //    });
            //}
            //else
            //{
            SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.FilmGrantedHandler(filmReward, (playerFilm) =>
            {
                SetFilmCounterText(playerFilm);

                if (playerFilm != globalSettings.Film.MaxFilmCount)
                {
                    filmIsReplenishing = true;

                    if (filmReward.Equals(1))
                    {
                        timeToNextFilm = DateTime.Now.AddSeconds(globalSettings.Film.FilmAwardTimerInSeconds);
                        SetNextFilmTime();
                        timeSpanToNextFilm = timeToNextFilm - DateTime.Now;
                    }
                }
                else
                {
                    filmIsReplenishing = false;
                    PlayerPrefs.DeleteKey(GameConstants.FilmFeature.DateTimeFilmLastSpent);
                    SetDefaultDetails();
                }

                //if (playerFilm.Equals(globalSettings.Film.MaxFilmCount))
                //{
                //    filmIsReplenishing = false;
                //    PlayerPrefs.DeleteKey(GameConstants.FilmFeature.DateTimeFilmLastSpent);
                //    SetDefaultDetails();
                //    return;
                //}
                //else
                //{
                //    if (playerFilm.Equals(1))
                //    {
                //        filmIsReplenishing = true;
                //        timeToNextFilm = DateTime.Now.AddSeconds(globalSettings.Film.FilmAwardTimerInSeconds);
                //        SetNextFilmTime();
                //        timeSpanToNextFilm = timeToNextFilm - DateTime.UtcNow;
                //        return;
                //    }
                //    else return;

                //}
            });
            //}
        }

        [UsedImplicitly]
        private void OnApplicationPause(bool isPaused)
        {
            if (isPaused)
            {
                return;
            }
            else
            {
                UpdateFilmOnAppRestore();
            }
        }

        private void UpdateDetailsWithTimeText()
        {
            timeCounterText.gameObject.SetActive(true);
            int currentSecondsTime = (int)timeSpanToNextFilm.TotalSeconds;

            if (previousSecondsTime != currentSecondsTime)
            {
                stringBuffer
                    .Append(timeSpanToNextFilm.Minutes.ToString("D2"))
                    .Append(":")
                    .Append(timeSpanToNextFilm.Seconds.ToString("D2"));

                timeCounterText.text = stringBuffer.ToString();
                stringBuffer.Clear();
                previousSecondsTime = currentSecondsTime;
            }
        }

        private void SetDefaultDetails()
        {
            previousSecondsTime = 0;
            timeCounterText.text = $"{GameConstants.FilmFeature.Full}";
        }

        public void GameStartAnimation(string trigger)
        {
            Show();
            gameStartAnimator.SetTrigger(trigger);
        }
    }
}
