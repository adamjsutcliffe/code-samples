using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using Peak.QuixelLogic.Scripts.Settings;
using TMPro;
using UnityEngine.UI;
using Peak.QuixelLogic.Scripts.Game;
using Peak.QuixelLogic.Scripts.Game.Gameplay;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class BonusBarUIActivator : SceneActivationBehaviour<BonusBarUIActivator>
    {
        [SerializeField]
        private float timeLimit;

        [SerializeField]
        private Image bonusBarImageFill;

        public float fillAmountIncrement;

        [SerializeField]
        private StarUIScript starTwo;

        [SerializeField]
        private StarUIScript starThree;

        [SerializeField]
        private int twoStarSecondsLimit;

        [SerializeField]
        private int threeStarSecondsLimit;

        private GameplayScript boardGameplayScript;

        [SerializeField]
        private GameObject dim;

        [SerializeField]
        private Animator bonusBarAnimator;

        [SerializeField]
        private RectTransform bonusBarHolder;

        /// <summary>
        /// Vector2 to hold the original position of the bonusbar
        /// </summary>
        private Vector2 bonusBarOriginalTransform;

        private bool thirdStarLost;
        private bool secondStarLost;

        public override void Initialize()
        {
            base.Initialize();
            bonusBarOriginalTransform = bonusBarHolder.anchoredPosition;
        }

        public override void Show()
        {
            base.Show();
        }

        public override void Hide()
        {
            base.Hide();
        }

        public void InitiateBonusBar(RuleSettings ruleSettings, GameplayScript BoardGameplayScript)
        {
            boardGameplayScript = BoardGameplayScript;

            // Instate default values for that board
            timeLimit = ruleSettings.TimeLimit;

            twoStarSecondsLimit = Mathf.RoundToInt(timeLimit / 100 * ruleSettings.TwoStarLimitPercentage);
            threeStarSecondsLimit = Mathf.RoundToInt(timeLimit / 100 * ruleSettings.ThreeStarLimitPercentage);

            starTwo.SetStarPosition(ruleSettings.TwoStarLimitPercentage);
            starThree.SetStarPosition(ruleSettings.ThreeStarLimitPercentage);

            bonusBarImageFill.fillAmount = 1;
            fillAmountIncrement = 1 / timeLimit;

            thirdStarLost = false;
            secondStarLost = false;
        }

        private IEnumerator DepleteBarFill()
        {
            float time = 1;

            while (true)
            {
                yield return new WaitForSeconds(0.1f);
                time -= 0.1f;
                bonusBarImageFill.fillAmount -= fillAmountIncrement / 10;

                if (time <= 0)
                {
                    yield break;
                }
            }
        }



        public int SetGameTime(MainGameData gameData)
        {
            int secondsLeft = gameData.SecondsLeft;

            StartCoroutine(DepleteBarFill());

            if (secondsLeft < threeStarSecondsLimit && !thirdStarLost)
            {
                thirdStarLost = true;
                starThree.LoseStar();
            }
            if (secondsLeft < twoStarSecondsLimit && !secondStarLost)
            {
                secondStarLost = true;
                starTwo.LoseStar();
            }

            return secondsLeft >= threeStarSecondsLimit ? 3 : secondsLeft >= twoStarSecondsLimit ? 2 : 1;
        }

        public void ShowDim(bool show)
        {
            dim.SetActive(show);
        }

        private void ResetBonusBar()
        {
            bonusBarHolder.SetParent(canvasRoot.gameObject.transform);
            bonusBarHolder.anchoredPosition = bonusBarOriginalTransform;
        }

        public void ExitBonusBar(bool exit = true)
        {
            if (exit)
            {
                bonusBarHolder.SetParent(bonusBarAnimator.transform.GetChild(0));
                bonusBarAnimator?.SetTrigger("Exit");
            }
            else
            {
                ResetBonusBar();
                bonusBarAnimator?.SetTrigger("Idle");
            }
        }
    }
}