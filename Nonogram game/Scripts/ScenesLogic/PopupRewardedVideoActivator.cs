using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using JetBrains.Annotations;
using System;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class PopupRewardedVideoActivator : SceneActivationBehaviour<PopupRewardedVideoActivator>
    {
        [Header("Rewarded video pop up")]
        [SerializeField]
        private GameObject outOfCoinsPopup;

        [Header("Video error pop up")]
        [SerializeField]
        private GameObject videoErrorPopup;

        private Action<bool> buttonClicked;
        private Action ErrorAcceptedContinue;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);
        }

        public override void Hide()
        {
            base.Hide();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!InterfaceController.Instance.IsAnyPopupSceneActive());
        }

        public void ShowOutOfCoinsPopup(Action<bool> ButtonClicked)
        {
            buttonClicked = ButtonClicked;

            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);
            outOfCoinsPopup.SetActive(true);

            Show();
        }

        public void HideOutOfCoinsPopup()
        {
            outOfCoinsPopup.SetActive(false);
        }

        public void WatchVideoButton()
        {
            outOfCoinsPopup.SetActive(false);
            buttonClicked?.Invoke(true);
        }

        [UsedImplicitly]
        public void ExitPanel()
        {
            outOfCoinsPopup.SetActive(false);    // change for animation to shrink? then hide?
            videoErrorPopup.SetActive(false);
            buttonClicked?.Invoke(false);

            CleanUpActions();
        }

        [UsedImplicitly]
        public void ShowVideoErrorPopup(Action errorAccept = null)
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);

            ErrorAcceptedContinue = errorAccept;
            videoErrorPopup.SetActive(true);

            Show();
        }

        [UsedImplicitly]
        public void AcceptVideoErrorAndResume()
        {
            videoErrorPopup.SetActive(false);
            ErrorAcceptedContinue?.Invoke();
            CleanUpActions();
        }

        private void CleanUpActions()
        {
            ErrorAcceptedContinue = null;
            buttonClicked = null;

            Hide();
        }
    }
}
