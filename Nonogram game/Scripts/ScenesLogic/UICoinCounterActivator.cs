using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using Peak.QuixelLogic.Scripts.Game;
using TMPro;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class UICoinCounterActivator : SceneActivationBehaviour<UICoinCounterActivator>
    {
        [SerializeField]
        private TextMeshProUGUI coinText;

        [SerializeField]
        private ButtonController storeButton;

        [SerializeField]
        private Animator gameStartAnimator;

        [SerializeField]
        private GameObject coinObject;

        public GameObject CoinObject => coinObject;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            storeButton.transform.parent.gameObject.SetActive(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.FtuePassed);
        }

        public override void Hide()
        {
            base.Hide();
        }

        public override void SetButtons(bool enabled)
        {
            if (SceneActivationBehaviour<StoreUIActivator>.Instance != null && SceneActivationBehaviour<StoreUIActivator>.Instance.IsActive() && enabled)
            {
                return;
            }
            base.SetButtons(enabled);
            storeButton.SetInteractability(enabled);
        }

        [UsedImplicitly]
        public void ShowStore()
        {
            storeButton.SetInteractability(false);
            //TODO: check for ingame/menu/collection
            if (SceneActivationBehaviour<StoreUIActivator>.Instance.IsActive())
            {
                return;
            }
            SceneActivationBehaviour<StoreUIActivator>.Instance.OpenStore(() =>
            {
                storeButton.SetInteractability(true);
            }, SceneActivationBehaviour<MainMenuActivator>.Instance.RootCamera.isActiveAndEnabled ?
                QLPurchaseSource.QLPurchaseSourceMenu : SceneActivationBehaviour<CollectionScreenActivator>.Instance.RootCamera.isActiveAndEnabled ?
                QLPurchaseSource.QLPurchaseSourceCollection : QLPurchaseSource.QLPurchaseSourceInGame);
        }

        public void SetPlayerCoins(int coinCount)
        {
            coinText.text = coinCount.ToString();
        }


        private Coroutine CoinCounterRollCoroutine;

        public void CoinCounterClaim(int playerCoins, int coinRewardAmount, float delay)
        {
            int previousCoinCount = playerCoins - coinRewardAmount;
            CoinCounterRollCoroutine = StartCoroutine(CoinCounterRollClaim(previousCoinCount, playerCoins, delay));
        }

        public void CoinCounterSpend(int playerCoins, int coinCostAmount, float delay)
        {
            int previousCoinCount = playerCoins + coinCostAmount;
            CoinCounterRollCoroutine = StartCoroutine(CoinCounterRollSpend(previousCoinCount, playerCoins, delay));
        }

        private IEnumerator CoinCounterRollClaim(float previousCoinCount, int newCoinCount, float delay)
        {
            SetPlayerCoins((int)previousCoinCount);
            yield return new WaitForSeconds(delay);

            float coinIncrement = (newCoinCount - previousCoinCount) * 0.01f;

            while (true)
            {
                yield return new WaitForSeconds(0.01f);

                previousCoinCount += coinIncrement;

                if (previousCoinCount % 2 == 0) SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Coinsadded);

                SetPlayerCoins((int)previousCoinCount);

                if (previousCoinCount >= newCoinCount)
                {
                    SetPlayerCoins(newCoinCount);
                    yield break;
                }
            }
        }

        private IEnumerator CoinCounterRollSpend(float previousCoinCount, int newCoinCount, float delay)
        {
            SetPlayerCoins((int)previousCoinCount);
            yield return new WaitForSeconds(delay);

            float coinIncrement = (previousCoinCount - newCoinCount) * 0.1f;

            while (true)
            {
                yield return new WaitForFixedUpdate();

                previousCoinCount -= coinIncrement;

                if (previousCoinCount % 2 == 0) SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Coinsadded);

                SetPlayerCoins((int)previousCoinCount);

                if (previousCoinCount <= newCoinCount)
                {
                    SetPlayerCoins(newCoinCount);
                    yield break;
                }
            }
        }

        public void GameStartAnimation(string trigger)
        {
            Show();
            gameStartAnimator.SetTrigger(trigger);
        }
    }
}