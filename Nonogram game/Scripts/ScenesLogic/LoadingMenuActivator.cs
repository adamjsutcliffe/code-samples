using System.Collections;
using Peak.QuixelLogic.Scripts.Autogenerated;
using UnityEngine;
using UnityEngine.UI;
using Peak.QuixelLogic.Scripts.ScenesLogic;
using Peak.QuixelLogic.Scripts.Common;
using com.adjust.sdk;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public sealed class LoadingMenuActivator : SceneActivationBehaviour<LoadingMenuActivator>
    {
        /// <summary>
        /// Loading image, e.g. a bar you want to fill as game loads.
        /// </summary>
        [SerializeField]
        private Image progressImage;

#if UNITY_EDITOR
        [SerializeField]
        private bool debugOptionToAllowAppToRunInBackground;
#endif
        [SerializeField]
        private Adjust adjustObject;

        private const float loadingBarWidth = 580f;

        [SerializeField]
        private RectTransform UFOHolder;

        [SerializeField]
        private RectTransform UFOloadIcon;

        // Use this for initialization
        private void Start()
        {
#if UNITY_EDITOR
            Application.runInBackground = debugOptionToAllowAppToRunInBackground;
#else
            Application.runInBackground = false;
#endif
        }

        public override void Initialize()
        {
#if PLATFORM_IOS
            Application.targetFrameRate = 60;
            QualitySettings.vSyncCount = 0;
            iOSHapticFeedback.InitialiseiOSHaptics();
#endif
            StartCoroutine(LoadScenesAsyncAll());
        }

        public override void Show()
        {
            base.Show();
        }

        public override void Hide()
        {
            base.Hide();
        }

        private IEnumerator LoadScenesAsyncAll()
        {
            // wait for quality settings
            yield return new WaitForEndOfFrame();

            // Load specific scenes - GameWindow.SCENENAME

            GameWindow[] scenesToLoadOnStartUp =
            {
                GameWindow.GlobalLogic,
                GameWindow.CollectionScreen,
                GameWindow.CollectionOverlay,
                GameWindow.MainMenu,
                GameWindow.ToolbarUI,
                GameWindow.UICoinCounter,
                GameWindow.BoardUI,
                GameWindow.BonusBarUI,
                GameWindow.TopBarUI,
                GameWindow.PostGameScene,
                GameWindow.SettingsMenuUI,
                GameWindow.OverlayUIScene,
                GameWindow.BoardBlur,
                GameWindow.BoardMenu,
                GameWindow.UILevelProgressCounter,
                GameWindow.UIFilmCounter,
                GameWindow.PopupClaimCoins,
                GameWindow.PopupReplayLevel,
                GameWindow.PopupRewardedVideo,
                GameWindow.PopupGoldLevelPurchase,
                GameWindow.PopUpFilm,
                GameWindow.PopUpNotifications,
                GameWindow.PopupGameComplete,
                GameWindow.StoreUI,
#if UNITY_IOS
                GameWindow.PopupStoreMessage
#elif UNITY_ANDROID
                GameWindow.PopupStoreMessage,
                GameWindow.PopUpAndroidReview,
                GameWindow.PopUpAndroidGold
#endif
            };

            InterfaceController.Instance.LoadWithProgress(scenesToLoadOnStartUp,
            () => StartCoroutine(NavigationSceneLoaded()),
                progress => progressImage.fillAmount = 1f * progress / scenesToLoadOnStartUp.Length, // loading bar
                progress => SetUFO(progress, scenesToLoadOnStartUp.Length)); // ufo position
        }

        private void SetUFO(int progress, int scenesToLoad)
        {
            UFOloadIcon.anchoredPosition = new Vector2(UFOHolder.rect.width * progress / scenesToLoad, 0);
            UFOloadIcon.rotation = Quaternion.Euler(0, 0, progress % 5 == 0 ? 15 : 0);
        }

        WaitForSeconds delay = new WaitForSeconds(0.1f);

        private IEnumerator NavigationSceneLoaded()
        {
            // Show initial scenes you want to display when game loads
            // using InterfaceController.Instance.Show(GameWindow.SCENENAME);

            InterfaceController.Instance.Show(GameWindow.GlobalLogic);
            InterfaceController.Instance.Show(GameWindow.OverlayUIScene);
            InterfaceController.Instance.Show(GameWindow.CollectionScreen);

            InterfaceController.Instance.ShowAndSetActive(GameWindow.MainMenu);

            SceneActivationBehaviour<GameLogicActivator>.Instance.AnalyticsController.SetAdjustEnviroment(adjustObject.environment);
            yield return delay;

            // Hides loading menu scene
            InterfaceController.Instance.Unload(GameWindow.LoadingMenu);
        }
    }
}