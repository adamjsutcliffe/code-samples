using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using Peak.QuixelLogic.Scripts.Game;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Settings;
using TMPro;
using Peak.QuixelLogic.Scripts.Game.CollectionScripts;
using Fabric.Crashlytics;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class CollectionScreenActivator : SceneActivationBehaviour<CollectionScreenActivator>
    {
        [SerializeField]
        private CollectionPopulationScript collectionOrigin;

        [SerializeField]
        private ButtonController playButton;

        [SerializeField]
        private ButtonController homeButton;

        private RuleSettings rulesForNextBoard;

        private LevelCardScript nextLevelCard;
        private LevelCardScript completedCard;

        public bool NewLocationUnlocked => newLocationUnlocked;
        private bool newLocationUnlocked;

        private Object levelBeingPlayed;

        private Vector2 completedLevelLocale;

        public enum CollectionEvent
        {
            GameStart,
            NextLevelInOrderComplete,
            NewLocationUnlocked,
            GoldLevelComplete,
            CollectionComplete,
            GameComplete
        }

        private Coroutine collectionEventCoroutine;

        private void CleanUpCoroutine()
        {
            collectionEventCoroutine = null;
            return;
        }

        public void PopulateCollectionScreen(Player player)
        {
            collectionOrigin.LoadProgress(player);
            //ShowHidePlayButton(!player.GameComplete);
        }

        public void HideCollection()
        {
            collectionOrigin.gameObject.SetActive(false);
        }

        public void ShowCollection()
        {
            collectionOrigin.gameObject.SetActive(true);
        }

        public void SendNextLevelToBePlayed(RuleSettings ruleSettings, LevelCardScript level)
        {
            rulesForNextBoard = ruleSettings;
            nextLevelCard = level;
        }

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            InterfaceController.Instance.Show(GameWindow.UILevelProgressCounter);
            InterfaceController.Instance.Show(GameWindow.UIFilmCounter);
        }

        public void ShowCollectionEvent(CollectionEvent collectionEvent = CollectionEvent.GameStart, Player player = null)
        {
            DebugLog("[COLLECTION] " + collectionEvent);
            Crashlytics.Log($"Collection event: {collectionEvent}");
            //StartCoroutine(ShowingCollectionEvent(collectionEvent, player));

            switch (collectionEvent)
            {
                case CollectionEvent.GameStart:
                    collectionEventCoroutine = StartCoroutine(GameStartCoroutine());
                    break;

                case CollectionEvent.NextLevelInOrderComplete:
                    collectionEventCoroutine = StartCoroutine(NextLevelInOrderCompleteCoroutine());
                    break;

                case CollectionEvent.NewLocationUnlocked:
                    if (player.GroupIndex > 1)
                    {
                        collectionEventCoroutine = StartCoroutine(NewLocationUnlockedCoroutine());
                    }
                    else
                    {
                        collectionEventCoroutine = StartCoroutine(FirstEverLocationUnlockedCoroutine());
                    }
                    break;

                case CollectionEvent.GoldLevelComplete:
                    collectionEventCoroutine = StartCoroutine(GoldLevelCompleteCoroutine());
                    break;

                case CollectionEvent.CollectionComplete:
                    collectionEventCoroutine = StartCoroutine(CollectionCompleteCoroutine());
                    break;

                case CollectionEvent.GameComplete:
                    collectionEventCoroutine = StartCoroutine(GameCompleteCoroutine());
                    break;
            }
        }

        private IEnumerator GameStartCoroutine()
        {
            DebugLog("[COLLECTION] GameStartCoroutine");
            yield return new WaitForSeconds(0.1f);
            CallValues(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.GroupIndex + 1, SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.MainPuzzleIndex + 1);

            CleanUpCoroutine();
            yield break;
        }

        private IEnumerator NextLevelInOrderCompleteCoroutine()
        {
            DebugLog("[COLLECTION] NextLevelInOrderCompleteCoroutine");
            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);
            yield return new WaitForSeconds(0.1f);

            // show level just completed reveal animation
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            completedCard = (LevelCardScript)levelBeingPlayed;
            completedCard.Reveal();
            yield return new WaitForSeconds(0.5f);
            CallValues(nextLevelCard.LevelLocale.x, nextLevelCard.LevelLocale.y, true);
            SceneActivationBehaviour<GameLogicActivator>.Instance.FtueController.FilmIntroductionFtueStep();

            CleanUpCoroutine();
            yield break;
        }

        private IEnumerator FirstEverLocationUnlockedCoroutine()
        {
            DebugLog("[COLLECTION] FirstEverLocationUnlockedCoroutine");
            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);
            yield return new WaitForSeconds(0.1f);

            // reveal finished level
            // show collection complete

            newLocationUnlocked = true;
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            completedCard = (LevelCardScript)levelBeingPlayed;
            completedCard.Reveal();
            yield return new WaitForSeconds(1.5f);

            // show fireworks and alien
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Locationunlocked);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.ShowCollectionViewAlien($"{GameConstants.MainGame.FeatureMessages.NewLocationUnlocked}");
            yield return new WaitForSeconds(0.5f);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.CelebrateAlien();
            yield return new WaitForSeconds(2f);

            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.HideCollectionViewAlien();

            InterfaceController.Instance.Hide(GameWindow.CollectionScreen);
            SceneActivationBehaviour<MainMenuActivator>.Instance.TransitionAnimation();

            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);

            newLocationUnlocked = false;

            CleanUpCoroutine();
            yield break;
        }

        private IEnumerator NewLocationUnlockedCoroutine()
        {
            DebugLog("[COLLECTION] NewLocationUnlockedCoroutine");
            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);
            yield return new WaitForSeconds(0.1f);

            // reveal finished level
            // show collection complete

            newLocationUnlocked = true;
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            completedCard = (LevelCardScript)levelBeingPlayed;
            completedCard.Reveal();
            yield return new WaitForSeconds(1.5f);

            // show fireworks and alien
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Locationunlocked);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.ShowCollectionViewAlien($"{GameConstants.MainGame.FeatureMessages.NewLocationUnlocked}");
            yield return new WaitForSeconds(0.5f);

            int playerCoins = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.Coins;
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.CoinCounterClaim(playerCoins, 50, 0.1f);

            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.CelebrateAlien();
            yield return new WaitForSeconds(2f);

            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.HideCollectionViewAlien();

            InterfaceController.Instance.Hide(GameWindow.CollectionScreen);
            SceneActivationBehaviour<MainMenuActivator>.Instance.TransitionAnimation();

            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);

            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            yield return new WaitForSeconds(0.5f);
            collectionOrigin.ShowGoldCardsUnlocking(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.GroupIndex - 1);
            yield return new WaitForSeconds(1.25f);
            CallValues(nextLevelCard.LevelLocale.x, nextLevelCard.LevelLocale.y, true);
            newLocationUnlocked = false;

            CleanUpCoroutine();
            yield break;
        }

        private IEnumerator GoldLevelCompleteCoroutine()
        {
            DebugLog("[COLLECTION] GoldLevelCompleteCoroutine");
            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);
            yield return new WaitForSeconds(0.1f);

            // show gold level reveal animation
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            GoldLevelCardScript completedGoldCard = (GoldLevelCardScript)levelBeingPlayed;
            completedGoldCard.Reveal();
            int groupFromWhichGoldCardWasCompleted = (int)completedGoldCard.LevelLocale.x - 1;
            yield return new WaitForSeconds(1.5f);
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(false);
            collectionOrigin.CheckGoldsForCollection(groupFromWhichGoldCardWasCompleted);

            CleanUpCoroutine();
            yield break;
        }

        private IEnumerator CollectionCompleteCoroutine()
        {
            DebugLog("[COLLECTION] CollectionCompleteCoroutine");
            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);
            yield return new WaitForSeconds(0.1f);

            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            GoldLevelCardScript completedFinalGoldCard = (GoldLevelCardScript)levelBeingPlayed;

            // show fireworks and alien
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Locationunlocked);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.ShowCollectionViewAlien($"{GameConstants.MainGame.FeatureMessages.CollectionComplete}", true);
            yield return new WaitForSeconds(0.5f);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.CelebrateAlien();

            yield return new WaitForSeconds(2f);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.HideCollectionViewAlien();
            CallValues((int)completedFinalGoldCard.LevelLocale.x, (int)completedFinalGoldCard.LevelLocale.y, true, true);

            CleanUpCoroutine();
            yield break;
        }

        private IEnumerator GameCompleteCoroutine()
        {
            DebugLog("[COLLECTION] GameCompleteCoroutine");
            yield return new WaitUntil(() => RootCamera.isActiveAndEnabled);
            yield return new WaitForSeconds(0.1f);

            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);
            completedCard = (LevelCardScript)levelBeingPlayed;
            completedCard.Reveal();
            yield return new WaitForSeconds(1.5f);

            // show fireworks and alien
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Locationunlocked);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.ShowCollectionViewAlien($"{GameConstants.MainGame.FeatureMessages.AllCollectionsComplete}", true);
            yield return new WaitForSeconds(0.5f);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.CelebrateAlien();
            yield return new WaitForSeconds(2f);
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(false);
            SceneActivationBehaviour<CollectionOverlayActivator>.Instance.HideCollectionViewAlien();
            collectionOrigin.ShowGoldCardsUnlocking(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.GroupIndex);
            yield return new WaitForSeconds(1.5f);
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(false);
            SceneActivationBehaviour<PopupGameCompleteActivator>.Instance.ShowGameCompletePopup(() =>
            {
                return;
            });

            CleanUpCoroutine();
            yield break;
        }

        public void CallValues(float group, float index, bool animate = false, bool completeCollection = false)
        {
            //print("[COLL] call values - group index " + group + ", level index " + index + ", animate " + animate + ", collection complete " + completeCollection);
            group -= 1;

            StartCoroutine(collectionOrigin.SnapViewport(group, index, animate, completeCollection));

            //collectionOrigin.SnapViewport(group, index, animate, completeCollection);
        }

        public override void Hide()
        {
            base.Hide();
            InterfaceController.Instance.Hide(GameWindow.UILevelProgressCounter);
        }

        public override void SetButtons(bool enabled)
        {
            base.SetButtons(enabled);
        }

        [UsedImplicitly]
        public void PlayNextLevel()
        {
            playButton.gameObject.SetActive(false);

            levelBeingPlayed = nextLevelCard;

            CallValues(nextLevelCard.LevelLocale.x, nextLevelCard.LevelLocale.y);

            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ToggleBlocker(true);

            GameController gameController = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController;

            // Interstitial
            // check to see if first game of session is done
            bool firstGameOfSessionPassed = gameController.GameSessionCounter != 0;
            bool ftuePassed = gameController.Player.FtuePassed;
            bool enoughFilm = gameController.Player.Film > 0;
            bool notTooSoon = !gameController.IsInterstitialTooSoon() || gameController.GameSessionCounter % 2 == 0;

            DebugLog($"[ADS] first game of sessions passed: {firstGameOfSessionPassed}, not too soon: {notTooSoon} has removed ads: {gameController.Player.HasRemovedAds}");

            if (firstGameOfSessionPassed && ftuePassed && enoughFilm && notTooSoon && !gameController.Player.HasRemovedAds)
            {
                DebugLog("[ADS] ad should be shown - attempting to show interstitial");
                SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.CallInterstitial(rulesForNextBoard);
            }
            else
            {
                DebugLog("[ADS] ad not to be shown - starting game");
                StartCoroutine(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.StartGameHandler(rulesForNextBoard));
            }
        }

        public void ShowHidePlayButton(bool show)
        {
            if (SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.GameComplete)
            {
                playButton.gameObject.SetActive(false);
            }
            else playButton.gameObject.SetActive(show);
            //homeButton.gameObject.SetActive(show);
        }

        public void PlayChosenLevel(RuleSettings ruleSettings, Object level, bool isReplay = false)
        {
            collectionOrigin.StopScrollMovement();
            levelBeingPlayed = level;
            StartCoroutine(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.StartGameHandler(ruleSettings, isReplay));
        }

        public void GoBackToMainMenu()
        {
            //homeButton.gameObject.SetActive(false);
            InterfaceController.Instance.Show(GameWindow.MainMenu);
            InterfaceController.Instance.Hide(GameWindow.CollectionScreen);
        }
    }
}