using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using TMPro;
using JetBrains.Annotations;
using System;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class PopUpNotificationsActivator : SceneActivationBehaviour<PopUpNotificationsActivator>
    {
        [SerializeField]
        private GameObject notificationPanel;

        [SerializeField]
        private TextMeshProUGUI popupTitleText;

        [SerializeField]
        private TextMeshProUGUI popupBodyText;

        private Action<bool> notificationPopupAccepted;

        public enum NotificationType
        {
            Film,
            Normal
        }

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);

        }

        public override void Hide()
        {
            base.Hide();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!InterfaceController.Instance.IsAnyPopupSceneActive());
        }

        [UsedImplicitly] // called by 1) main menu on 2nd game open, 2) collection screen after puzzle 11, 3) when out of film pop up is closed or rewarded video is claimed to get 3 more film
        public void ShowNotificationPopup(string titleText, string messageText, Action<bool> popupAccepted)
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);

            Show();

            notificationPopupAccepted = popupAccepted;
            popupTitleText.text = titleText;
            popupBodyText.text = messageText;
            notificationPanel.SetActive(true);
        }

        [UsedImplicitly]
        public void AcceptNotificationsButton()
        {
            NotificationController.Instance.ToggleNotifications();
            notificationPopupAccepted?.Invoke(true);
            ClearAction();
        }

        [UsedImplicitly]
        public void ExitPanel()
        {
            notificationPopupAccepted?.Invoke(false);
            notificationPanel.SetActive(false);
            Hide();
        }

        private void ClearAction()
        {
            notificationPopupAccepted = null;
            ExitPanel();
        }
    }
}
