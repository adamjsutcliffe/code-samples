using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using Peak.QuixelLogic.Scripts.Settings;
using Peak.QuixelLogic.Scripts.Common.IAP;
using System;
using UnityEngine.Purchasing;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using UnityEngine.UI;
using Peak.QuixelLogic.Scripts.Game;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class StoreUIActivator : SceneActivationBehaviour<StoreUIActivator>
    {
        [SerializeField]
        private StoreSettings storeSettings;

        public StoreSettings StoreSettings => storeSettings;

        [SerializeField]
        private ButtonController backButton;

        [SerializeField]
        private StoreItemScript storeBonusScript;

        [SerializeField]
        private Transform storeProductsRoot;

        [SerializeField]
        private StoreItemScript storeObject;

        [SerializeField]
        private ScrollRect StoreScrollRect;

        private Purchaser purchaser;

        private List<StoreItemScript> spawnedStoreItems = new List<StoreItemScript>();

        private Action storeClosed;

        private bool wasPurchaseMade;

        private QLPurchaseSource storeOpenSource;

        public QLPurchaseSource StoreOpenSource => storeOpenSource;

        public override void Initialize()
        {
            purchaser = Purchaser.Instance;
            DebugLog($"UIStore INIT purchaser: {purchaser}");
            base.Initialize();
        }

        public override void Show()
        {
            if (purchaser != null)
            {
                purchaser.PurchaseCompleted += PurchaseSuccessful;
                purchaser.PurchaseFailed += PurchaseUnsuccessful;
            }
            wasPurchaseMade = false;
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);
            base.Show();
        }

        public override void Hide()
        {
            if (purchaser != null)
            {
                purchaser.PurchaseCompleted -= PurchaseSuccessful;
                purchaser.PurchaseFailed -= PurchaseUnsuccessful;
            }
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(true);
            base.Hide();
        }

        public override void SetButtons(bool enabled)
        {
            base.SetButtons(enabled);
            for (int i = 0; i < spawnedStoreItems.Count; i++)
            {
                StoreItemScript itemScript = spawnedStoreItems[i];
                itemScript.SetButtonEnabled(enabled);
            }
        }

        private bool IsStoreInitialized()
        {
            return purchaser.IsInitialized();
        }

        public void OpenStore(Action closed, QLPurchaseSource source)
        {
            storeOpenSource = source;
            storeClosed = closed;

            SceneActivationBehaviour<GameLogicActivator>.Instance.AnalyticsController.StoreOpenEvent();

            SceneActivationBehaviour<BoardUIActivator>.Instance.PauseGameHandler();
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.ShowLoadingScreen();
            if (!IsStoreInitialized())
            {
                purchaser.InitializePurchasing(StoreLoadedCompletion, StoreLoadErrorCompletion);
            }
            else
            {
                StoreLoadedCompletion();
            }
        }

        private void StoreLoadedCompletion()
        {
            for (int i = 0; i < spawnedStoreItems.Count; i++)
            {
                StoreItemScript spawnedStoreItem = spawnedStoreItems[i];
                Destroy(spawnedStoreItem.gameObject);
            }
            storeBonusScript.gameObject.SetActive(false);
            spawnedStoreItems = new List<StoreItemScript>();

            for (int i = 0; i < storeSettings.StoreProducts.Length; i++)
            {
                if (!ShouldShowItem(storeSettings.StoreProducts[i]))
                {
                    continue;
                }
                StoreProductSettings settings = storeSettings.StoreProducts[i];
                if (settings.IsMostPopular)
                {
                    storeBonusScript.SetUpValues(settings, purchaser);
                    storeBonusScript.gameObject.SetActive(true);
                    continue;
                }
                StoreItemScript spawnedStoreItem = Instantiate(storeObject, storeProductsRoot);
                spawnedStoreItems.Add(spawnedStoreItem);
                spawnedStoreItem.SetUpValues(storeSettings.StoreProducts[i], purchaser);
            }
            StartCoroutine(RemoveLoadingWithDelay());
        }

        private bool ShouldShowItem(StoreProductSettings item)
        {
            Player player = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player;
            if (item.IsMostPopular && player.IsBonusPurchased(item.ProductId))
            {
                DebugLog($"HIDE ITEM: {item.ProductId}");
                return false;
            }
            DebugLog($"SHOW ITEM: {item.ProductId}");
            return true;
        }

        private IEnumerator RemoveLoadingWithDelay()
        {
            yield return new WaitForSeconds(0.5f);
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.HideLoadingScreen(Show);
        }

        private void StoreLoadErrorCompletion()
        {
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.HideLoadingScreen(StoreLoadShowErrorPopup);
        }

        private void StoreLoadShowErrorPopup()
        {
            SceneActivationBehaviour<PopupStoreMessageActivator>.Instance.ShowMessagePopup(PopupStoreMessageActivator.StoreMessageType.Connectivity);
        }

        public void CloseStore()
        {
            // delete prefabs
            foreach (StoreItemScript storeItem in spawnedStoreItems)
            {
                Destroy(storeItem.gameObject);
            }

            spawnedStoreItems.Clear();

            storeProductsRoot.localPosition = new Vector3(0, 0, 0);

            storeClosed?.Invoke();
            storeClosed = null;

            SceneActivationBehaviour<BoardUIActivator>.Instance.ResumeGameHandler();
            DebugLog($"Was purchase made: {wasPurchaseMade}");
            Hide();
            if (!wasPurchaseMade)
            {
                SceneActivationBehaviour<BoardUIActivator>.Instance.PauseGameHandler();
                SceneActivationBehaviour<PopupRewardedVideoActivator>.Instance.ShowOutOfCoinsPopup((bool videoWatchAccepted) =>
                {
                    if (!videoWatchAccepted)
                    {
                        SceneActivationBehaviour<BoardUIActivator>.Instance.ResumeGameHandler();
                    }
                    else SceneActivationBehaviour<ToolbarUIActivator>.Instance.ClaimRewardedVideo();
                });
            }

            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!InterfaceController.Instance.IsAnyPopupSceneActive());
        }

        public void BackButton()
        {
            CloseStore();
        }

        public int CoinsForProduct(string productId)
        {
            for (int i = 0; i < storeSettings.StoreProducts.Length; i++)
            {
                StoreProductSettings setting = storeSettings.StoreProducts[i];
                if (setting.ProductId.Equals(productId))
                {
                    return setting.CoinAmount;
                }
            }
            return 0;
        }

        public void EnableLoadingAnimation(bool enabled)
        {
            SceneActivationBehaviour<OverlayUISceneActivator>.Instance.EnableLoadingAnimation(enabled);
            StoreScrollRect.vertical = !enabled;
            SetButtons(!enabled);
            DebugLog($"Loading animation active: {enabled}");
        }

        //private StoreItemScript ItemForID(string purchaseId)
        //{
        //    for (int i = 0; i < spawnedStoreItems.Count; i++)
        //    {
        //        StoreItemScript script = spawnedStoreItems[i];
        //        if (script.purchaseId.Equals(purchaseId))
        //        {
        //            return script;
        //        }
        //    }
        //    return null;
        //}

        private bool PurchaseRemovesAds(string productId)
        {
            for (int i = 0; i < storeSettings.StoreProducts.Length; i++)
            {
                StoreProductSettings setting = storeSettings.StoreProducts[i];
                if (setting.ProductId.Equals(productId))
                {
                    return setting.RemovesAds;
                }
            }
            return false;
        }

        private bool PurchaseIsMostPopular(string productId)
        {
            for (int i = 0; i < storeSettings.StoreProducts.Length; i++)
            {
                StoreProductSettings setting = storeSettings.StoreProducts[i];
                if (setting.ProductId.Equals(productId))
                {
                    return setting.IsMostPopular;
                }
            }
            return false;
        }

        private void PurchaseSuccessful(string purchaseID)
        {
            DebugLog($"Purchase successful: {purchaseID}");

            if (PurchaseRemovesAds(purchaseID))
            {
                SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.UpdatePlayerAdPrefs();
            }

            if (PurchaseIsMostPopular(purchaseID))
            {
                DebugLog($"PURCHASE MOST POPULAR: {purchaseID}");
                Player player = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player;
                player.bonusSkus.Add(purchaseID);
                SceneActivationBehaviour<GameLogicActivator>.Instance.ServerController.PersistPlayerProgress(player);
                storeBonusScript.gameObject.SetActive(false);
            }
            SceneActivationBehaviour<PopupStoreMessageActivator>.Instance.ShowMessagePopup(PopupStoreMessageActivator.StoreMessageType.Success, CoinsForProduct(purchaseID));
            wasPurchaseMade = true;
#if UNITY_EDITOR
            return;
#endif
            EnableLoadingAnimation(false);
        }

        private void PurchaseUnsuccessful(string purchaseID, PurchaseFailureReason reason)
        {
            DebugLog($"Purchase unsuccessful: {purchaseID} reason: {reason}");

            switch (reason)
            {
                case PurchaseFailureReason.UserCancelled:
                    SceneActivationBehaviour<PopupStoreMessageActivator>.Instance.ShowMessagePopup(PopupStoreMessageActivator.StoreMessageType.Cancelled);
                    break;
                default:
                    SceneActivationBehaviour<PopupStoreMessageActivator>.Instance.ShowMessagePopup(PopupStoreMessageActivator.StoreMessageType.Failed);
                    break;
            }
#if UNITY_EDITOR
            return;
#endif
            EnableLoadingAnimation(false);
        }
    }
}
