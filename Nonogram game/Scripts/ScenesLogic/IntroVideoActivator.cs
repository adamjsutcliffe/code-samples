using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using UnityEngine.UI;
using UnityEngine.Video;
using Peak.QuixelLogic.Scripts.Common.Localisation;
using TMPro;
using System;
using System.IO;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class IntroVideoActivator : SceneActivationBehaviour<IntroVideoActivator>
    {
        [SerializeField]
        private RawImage rawImage;

        [SerializeField]
        private VideoPlayer videoPlayer;

        [SerializeField]
        private AudioSource audioSource;

        [SerializeField]
        private Animator introFadeAnimator;

        [Header("Do not change")]
        [SerializeField]
        private List<string> introVideoSubtitles = new List<string>();

        [SerializeField]
        private GameObject speechBubble;

        [SerializeField]
        private TextMeshProUGUI textSpace;

        [SerializeField]
        private TextMeshProUGUI subtitleText;

        private List<float> secondsPerSubtitle = new List<float>(6);

        private Action videoHasFinished;

        private const float introDelay = 9f;
        private const float subtitlePersistTime = 2f;
        private const float oneSecond = 1;
        private const float videoTimeMinusIntroAndWait = 6f;

        private float totalChars;

        private const float HxWfactor = 2.3940149625f;

        private bool deviceIsIpad;

        private const float sceneLoadDelay = 0.25f;

        private Coroutine playVideoCoroutine;
        private Coroutine subtitleCoroutine;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
        }

        public override void Hide()
        {
            base.Hide();
        }

        public void ShowGDPRAndIntro()
        {
            SceneActivationBehaviour<PopUpGdprActivator>.Instance.ShowGDPRPopup(() =>
            {
                ShowIntro(() =>
                {
                    InterfaceController.Instance.Unload(GameWindow.IntroVideo);
                    SceneActivationBehaviour<MainMenuActivator>.Instance.MainMenuLoad();
                });
            });
        }

        public void ShowIntro(Action videoFinished)
        {
            videoPlayer.Prepare();

            StartCoroutine(SetVideoSize());

            videoHasFinished = videoFinished;

            for (int i = 0; i < introVideoSubtitles.Count; i++) { introVideoSubtitles[i] = LocalisationSystem.GetLocalisedValue(introVideoSubtitles[i]); }

            subtitleText.text = "";

            Show();

            playVideoCoroutine = StartCoroutine(PlayVideo());
        }

        private IEnumerator SetVideoSize()
        {
            yield return new WaitForSeconds(sceneLoadDelay);

#if SIMULATE_IPAD
            deviceIsIpad = true;
#elif UNITY_IOS
            deviceIsIpad = true && UnityEngine.iOS.Device.generation.ToString().Contains("iPad");
#else
            deviceIsIpad = false;
#endif
            if (deviceIsIpad)
            {
                float canvasHeight = canvasRoot.GetComponent<RectTransform>().sizeDelta.y;

                rawImage.rectTransform.anchorMin = rawImage.rectTransform.anchorMax = new Vector2(0.5f, 0);
                rawImage.rectTransform.sizeDelta = new Vector2(canvasHeight / HxWfactor, canvasHeight);
                //print($"[TEST] x: {rawImage.rectTransform.sizeDelta.x}, y: {rawImage.rectTransform.sizeDelta.y}");
            }
            else
            {
                float actualWidth = rawImage.rectTransform.rect.width;
                Vector2 offset = new Vector2(0.0f, actualWidth * HxWfactor);

                rawImage.rectTransform.sizeDelta = offset;
            }

            yield break;
        }

        private IEnumerator PlayVideo()
        {
            introFadeAnimator.SetTrigger("FadeWhite"); // animation accompanying video

            yield return new WaitForSeconds(oneSecond);

            rawImage.texture = videoPlayer.texture;
            videoPlayer.Play();
            audioSource.Play();

            yield return new WaitForSeconds(introDelay);

            subtitleCoroutine = StartCoroutine(PlayText(0));

            // TODO: need to toggle blocker off here for skip button?

            yield break;
        }

        private IEnumerator PlayText(int subtitleStage)
        {
            speechBubble.SetActive(true);

            foreach (string subtitle in introVideoSubtitles) { totalChars += subtitle.Length; }

            float secondsPerTotalLetters = videoTimeMinusIntroAndWait / totalChars;

            foreach (string subtitle in introVideoSubtitles) { secondsPerSubtitle.Add(subtitle.Length * secondsPerTotalLetters); }

            while (true)
            {
                textSpace.text = introVideoSubtitles[subtitleStage];
                StartCoroutine(ScrollText(introVideoSubtitles[subtitleStage]));

                float waitTime = secondsPerSubtitle[subtitleStage] + subtitlePersistTime;

                yield return new WaitForSeconds(waitTime);

                subtitleStage++;

                textSpace.text = "";
                subtitleText.text = "";

                if (subtitleStage >= 6)
                {
                    speechBubble.SetActive(false);
                    videoPlayer.enabled = false;

                    UnloadVideo();

                    yield break;
                }
            }
        }

        private IEnumerator ScrollText(string subtitle)
        {
            foreach (char c in subtitle)
            {
                subtitleText.text += c;
                yield return new WaitForSeconds(0.01f);
            }
            yield break;
        }

        public void SkipIntro()
        {
            if (subtitleCoroutine != null) StopCoroutine(subtitleCoroutine);
            if (playVideoCoroutine != null) StopCoroutine(playVideoCoroutine);

            videoPlayer.Stop();
            audioSource.Stop();

            UnloadVideo();
        }

        private void UnloadVideo()
        {
            videoHasFinished?.Invoke();
            GC.Collect();
            InterfaceController.Instance.Unload(GameWindow.IntroVideo);
        }
    }
}