using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using System;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using Peak.QuixelLogic.Scripts.Game;
using Peak.QuixelLogic.Scripts.Settings;
using TMPro;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public sealed class PopUpFilmActivator : SceneActivationBehaviour<PopUpFilmActivator>
    {
        [SerializeField]
        private GameObject outOfFilmPanel;

        [SerializeField]
        private GameObject thankyouPanel;

        [SerializeField]
        private TextMeshProUGUI thankyouText;

        [SerializeField]
        private GameObject dailyRewardPanel;

        [SerializeField]
        private ButtonController coinButton;

        private Action coinPurchaseClicked;
        private Action watchVideoClicked;
        private Action exitClicked;

        private Action rewardClaimed;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);
        }

        public override void Hide()
        {
            base.Hide();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!InterfaceController.Instance.IsAnyPopupSceneActive());
        }

        #region out of film panel

        private RuleSettings ruleSettings;

        [UsedImplicitly]
        public void ShowOutOfFilmPanel(RuleSettings selectedRuleset, Action CoinPurchaseClicked, Action WatchVideoClicked, Action ExitClicked)
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Filmpopupappear);

            ruleSettings = selectedRuleset;

            coinPurchaseClicked = CoinPurchaseClicked;
            watchVideoClicked = WatchVideoClicked;
            exitClicked = ExitClicked;

            outOfFilmPanel.SetActive(true);

            Show();

            coinButton.SetInteractability(SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.Coins >= 100);
        }

        [UsedImplicitly]
        public void WatchVideoButton()
        {
            watchVideoClicked?.Invoke();
            SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.CallRewardedVideo(AdSourceType.FilmPopUp, false, gameRules: ruleSettings);
        }

        public void CoinPurchaseButton()
        {
            coinPurchaseClicked?.Invoke();
        }

        #endregion

        #region thank you panel

        [UsedImplicitly]
        public void ShowThankyouPanel(Action claimed)
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);

            outOfFilmPanel.SetActive(false);
            thankyouPanel.SetActive(true);
            thankyouText.text = $"+{SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.GlobalSettings.Film.FilmRewardCount} {GameConstants.MainGame.FeatureMessages.Film}";
            rewardClaimed = claimed;
            Show();
        }

        [UsedImplicitly]
        public void ClaimButton()
        {
            rewardClaimed?.Invoke();
            ExitPanel();
        }

        #endregion

        #region daily reward

        [UsedImplicitly]
        public void ShowDailyRewardPanel(Player player, Action claimed)
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);

            if (!player.NewLocation && player.ActiveGameSessions > 2)
            {
                dailyRewardPanel.SetActive(true);
                rewardClaimed = claimed;
                Show();
            }
            else claimed?.Invoke();
        }

        [UsedImplicitly]
        public void AcceptDailyReward()
        {
            rewardClaimed?.Invoke();
            ExitPanel();
        }

        [UsedImplicitly]
        public void ExitPanel()
        {
            // need to call try show notification pop up here
            SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.TryShowNotificationPopup(GameConstants.NotificationPopups.OutOfFilmNotificationPopupTitle, GameConstants.NotificationPopups.OutOfFilmNotificationPopupBody);

            outOfFilmPanel.SetActive(false);
            thankyouPanel.SetActive(false);
            dailyRewardPanel.SetActive(false);

            exitClicked?.Invoke();

            Hide();
        }

        #endregion

    }
}