using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;
using Peak.QuixelLogic.Scripts.Common.Extensions;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Settings.Autogenerated;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class OverlayUISceneActivator : SceneActivationBehaviour<OverlayUISceneActivator>
    {
        [SerializeField]
        private Canvas clickCanvas;

        [SerializeField]
        private Button fullScreenButton;

        [SerializeField]
        private Button toolToggleButton;

        [SerializeField]
        private Button hintButton;

        [Header("Overlay - FTUE")]
        [SerializeField]
        private GameObject gameplayMessageBottom;

        [SerializeField]
        private Animator gameplayMessageAnimator;

        [SerializeField]
        private TextMeshProUGUI gameplayMessageText;

        [SerializeField]
        private GameObject gameplayMessageArrow;

        [SerializeField]
        private GameObject ftueAlien;

        [SerializeField]
        private Image dimImage;

        [SerializeField]
        private GameObject tappingHand;

        private Coroutine autoHideFtueCoroutine;

        [SerializeField]
        private Animator ftueHandAnimator;

        [SerializeField]
        private Canvas blockerCanvas;

        [SerializeField]
        private Animator screenWipeAnimator;

        [SerializeField]
        private GameObject QuixelAnimationObject;

        public int ftueMessagesPerStage { get; set; }

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
        }

        public override void Hide()
        {
            base.Hide();
        }

        public void ScreenWipeTransition(List<GameWindow> hideScenes, List<GameWindow> showScenes)
        {
            ToggleBlocker(true);
            screenWipeAnimator.SetTrigger("Wipe1");
            SoundController.Instance.PlayAudioClip(SoundSettingsKey.Swipetransition);
            StartCoroutine(ChangeScenes(hideScenes, showScenes));
        }

        WaitForSeconds targetScreenDelay = new WaitForSeconds(0.25f);

        public IEnumerator ShowTargetScreen()
        {
            GC.Collect();

            yield return targetScreenDelay;
            screenWipeAnimator.SetTrigger("Wipe2");

            yield break;
        }

        WaitForSeconds changeSceneDelay = new WaitForSeconds(0.5f);

        private IEnumerator ChangeScenes(List<GameWindow> hideScenes, List<GameWindow> showScenes)
        {
            yield return changeSceneDelay;

            foreach (GameWindow scene in showScenes)
            {
                InterfaceController.Instance.Show(scene);
            }

            StartCoroutine(ShowTargetScreen());

            foreach (GameWindow scene in hideScenes)
            {
                InterfaceController.Instance.Hide(scene);
            }

            ToggleBlocker(false);

            yield break;
        }

        public void ShowFtueGameplayMessage(string message, bool hideBeforeShow = false, bool showArrow = false, int autoHideDelayInMs = 0, bool showHandTapping = false, int boxPosition = 0, bool showAlien = true)
        {
            SoundController.Instance.PlayAudioClip(ftueMessagesPerStage == 0 && showAlien ? SoundSettingsKey.Textbubbleappearspeaking : SoundSettingsKey.Textbubbleappear);
            ftueMessagesPerStage++;

            gameplayMessageArrow.SetActive(showArrow);

            if (hideBeforeShow)
            {
                HideFtueMessages();
            }

            gameplayMessageBottom.SetActive(true);
            gameplayMessageAnimator.SetInteger("Position", boxPosition);
            gameplayMessageText.text = message;
            ftueAlien.SetActive(showAlien);

            if (autoHideDelayInMs > 0)
            {
                if (autoHideFtueCoroutine != null)
                {
                    StopCoroutine(autoHideFtueCoroutine);
                }

                autoHideFtueCoroutine = StartCoroutine(AutoHideFtue(autoHideDelayInMs));
            }

            if (showHandTapping)
            {
                Invoke(nameof(ShowTappingHand), 2);
            }
        }

        private void ShowTappingHand()
        {
            tappingHand.SetActive(true);
        }

        public void HideFtueMessages()
        {
            CancelInvoke(nameof(ShowTappingHand));
            gameplayMessageBottom.SetActive(false);
            tappingHand.SetActive(false);
        }

        private IEnumerator AutoHideFtue(int autoHideDelayInMs)
        {
            yield return new WaitForSeconds(autoHideDelayInMs / 1000f);
            HideFtueMessages();
        }

        public void ShowHandAnimation(bool show, string animation = null)
        {
            if (show)
            {
                ftueHandAnimator.gameObject.SetActive(true);
                ftueHandAnimator.SetTrigger(animation);
            }
            else
            {
                if (ftueHandAnimator.gameObject.activeSelf)
                {
                    ftueHandAnimator.SetTrigger("Stop");
                    ftueHandAnimator.gameObject.SetActive(false);
                }
            }
        }

        public void ShowDim(bool show)
        {
            dimImage.enabled = show;
        }

        public void SubscribeForFullScreenTap(Action handler)
        {
            clickCanvas.gameObject.SetActive(true);
            fullScreenButton.gameObject.SetActive(true);
            fullScreenButton.onClick.RemoveAllListeners();
            fullScreenButton.onClick.AddListener(() =>
            {
                clickCanvas.gameObject.SetActive(false);
                fullScreenButton.gameObject.SetActive(false);
                handler?.Invoke();
            });
        }

        public void SubscribeForToolToggleTap(Action handler)
        {
            clickCanvas.gameObject.SetActive(true);
            toolToggleButton.gameObject.SetActive(true);
            toolToggleButton.onClick.RemoveAllListeners();
            toolToggleButton.onClick.AddListener(() =>
            {
                clickCanvas.gameObject.SetActive(false);
                toolToggleButton.gameObject.SetActive(false);
                handler?.Invoke();
            });
        }

        public void SubscribeHintTap(Action handler)
        {
            clickCanvas.gameObject.SetActive(true);
            hintButton.gameObject.SetActive(true);
            hintButton.onClick.RemoveAllListeners();
            hintButton.onClick.AddListener(() =>
            {
                clickCanvas.gameObject.SetActive(false);
                hintButton.gameObject.SetActive(false);
                //SceneActivationBehaviour<ToolbarUIActivator>.Instance.HintButtonScript.EnableHint();
                handler?.Invoke();
            });
        }

        public void ToggleBlocker(bool show)
        {
            blockerCanvas.gameObject.SetActive(show);
            SceneActivationBehaviour<CollectionScreenActivator>.Instance.ShowHidePlayButton(!show);
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!show);
        }

        public void ShowLoadingScreen()
        {
            ToggleBlocker(true);
            screenWipeAnimator.SetTrigger("Wipe1");
            SoundController.Instance.PlayAudioClip(SoundSettingsKey.Swipetransition);
            EnableLoadingAnimation(true);
        }

        public void HideLoadingScreen(Action completion)
        {
            StartCoroutine(HideLoadingCoroutine(completion));
        }

        private IEnumerator HideLoadingCoroutine(Action completion)
        {
            screenWipeAnimator.SetTrigger("Wipe2");
            completion?.Invoke();
            EnableLoadingAnimation(false);
            yield return new WaitForSeconds(0.3f);
            ToggleBlocker(false);
        }

        public void EnableLoadingAnimation(bool enabled)
        {
            QuixelAnimationObject.SetActive(enabled);
        }
    }
}
