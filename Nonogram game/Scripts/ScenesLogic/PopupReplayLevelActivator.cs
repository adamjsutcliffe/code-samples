using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using System;
using Peak.QuixelLogic.Scripts.Settings;
using UnityEngine.UI;
using TMPro;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using Peak.QuixelLogic.Scripts.Game.CollectionScripts;
using Peak.QuixelLogic.Scripts.Common.Localisation;
using System.Text;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class PopupReplayLevelActivator : SceneActivationBehaviour<PopupReplayLevelActivator>
    {
        [SerializeField]
        private GameObject PopupReplayPanel;

        [SerializeField]
        private GameObject NoCoinsPopupPanel;

        [SerializeField]
        private ReplayPopupDetailsScript replayPopupDetails;

        [SerializeField]
        private ReplayPopupDetailsScript noCoinsPopupDetails;

        private bool replayGoldLevel;

        [SerializeField]
        private TextMeshProUGUI buttonText;

        private Action<bool> buttonClicked;

        private int levelReplayCost;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);
        }

        public override void Hide()
        {
            base.Hide();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!InterfaceController.Instance.IsAnyPopupSceneActive());
        }

        private void OnEnable()
        {
            levelReplayCost = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.GlobalSettings.Coins.LevelReplayCost;
            buttonText.text = levelReplayCost.ToString();
        }

        public void ShowReplayPopupPanels(RuleSettings ruleSettings, int currentStarRecord, bool gold, Action<bool> ButtonClicked)
        {
            buttonClicked = ButtonClicked;
            replayGoldLevel = gold;

            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);

            if (SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.Coins >= levelReplayCost)
            {
                ShowPopupReplayPanel(ruleSettings, currentStarRecord);
            }
            else
            {
                ShowNoCoinsPopup(ruleSettings, currentStarRecord);
            }

            Show();
        }

        public void ShowPopupReplayPanel(RuleSettings ruleSettings, int currentStarRecord)
        {
            string localisedMessage = GameConstants.MainGame.FeatureMessages.ReplayTitle;
            string message = string.Concat((localisedMessage.Substring(0, localisedMessage.IndexOf('#'))), ruleSettings.Id, (localisedMessage.Substring(localisedMessage.IndexOf('#') + 1)));

            replayPopupDetails.PopulateInformation(ruleSettings.PuzzleIcon, LocalisationSystem.GetLocalisedValue(ruleSettings.PuzzleNameKey), message, currentStarRecord, replayGoldLevel);
            PopupReplayPanel.SetActive(true);
        }

        public void ShowNoCoinsPopup(RuleSettings ruleSettings, int currentStarRecord)
        {
            string localisedMessage = GameConstants.MainGame.FeatureMessages.ReplayError;
            string message = string.Concat((localisedMessage.Substring(0, localisedMessage.IndexOf('#'))), levelReplayCost, (localisedMessage.Substring(localisedMessage.IndexOf('#') + 1)));

            noCoinsPopupDetails.PopulateInformation(ruleSettings.PuzzleIcon, LocalisationSystem.GetLocalisedValue(ruleSettings.PuzzleNameKey), message, currentStarRecord, replayGoldLevel);
            NoCoinsPopupPanel.SetActive(true);
        }

        [UsedImplicitly]
        public void PurchaseReplay()
        {
            int playerCoins = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.Coins - levelReplayCost;
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.CoinCounterSpend(playerCoins, levelReplayCost, 0f);

            // take coins
            SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.CoinsSpentHandler(levelReplayCost, CoinSourceType.ReplayPurchase);

            PopupReplayPanel.SetActive(false);
            buttonClicked?.Invoke(true);

            Hide();
        }

        [UsedImplicitly]
        public void WatchVideoButton()
        {
            ClaimRewardedVideo();
            ExitPanel();
        }

        [UsedImplicitly]
        public void ClaimRewardedVideo()
        {
            SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.CallRewardedVideo(AdSourceType.ReplayPopUp);
        }

        [UsedImplicitly]
        public void PurchaseCoinsHandler()
        {
            //TODO trigger store
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);
            SceneActivationBehaviour<StoreUIActivator>.Instance.OpenStore(() =>
            {

                SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(true);
            }, QLPurchaseSource.QLPurchaseSourceReplay);
            ExitPanel();
        }

        public void ExitPanel()
        {
            PopupReplayPanel.SetActive(false);
            NoCoinsPopupPanel.SetActive(false);
            buttonClicked?.Invoke(false);

            Hide();
        }
    }
}
