using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using TMPro;
using Peak.QuixelLogic.Scripts.Settings;
using JetBrains.Annotations;
using Peak.QuixelLogic.Scripts.Common.AnalyticsScripts;
using System;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class PopupClaimCoinsActivator : SceneActivationBehaviour<PopupClaimCoinsActivator>
    {
        [SerializeField]
        private GameObject popupWindow;

        [SerializeField]
        private TextMeshProUGUI popupMessage;

        [SerializeField]
        private TextMeshProUGUI coinAmountText;

        private int coinRewardCount;

        [SerializeField]
        private ParticleSystem coinFX;

        public Action rewardClaimed;

        private CoinSourceType coinSourceType;

        [SerializeField]
        private ButtonController claimButton;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);
        }

        public override void Hide()
        {
            base.Hide();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(!InterfaceController.Instance.IsAnyPopupSceneActive());
        }

        public void ShowClaimPopup(string message, int rewardAmount, CoinSourceType CoinSourceType, Action claimed)
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);
            claimButton.SetInteractability(true);

            coinSourceType = CoinSourceType;
            popupMessage.text = message;
            rewardClaimed = claimed; // set action
            popupWindow.SetActive(true);
            coinRewardCount = rewardAmount;
            coinAmountText.text = coinRewardCount.ToString();

            Show();
        }

        [UsedImplicitly]
        public void ClaimReward()
        {
            claimButton.SetInteractability(false);
            SetCoinParticles();
            StartCoroutine(ClaimingRewardAnimation());
        }

        WaitForSeconds delay = new WaitForSeconds(2f);

        private IEnumerator ClaimingRewardAnimation()
        {
            int playerCoins = SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.Player.Coins;
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.CoinCounterClaim(playerCoins, coinRewardCount, 0.2f);

            //TODO: change angle of emission to point at coin counter
            GameObject coinTarget = SceneActivationBehaviour<UICoinCounterActivator>.Instance.CoinObject;

            Vector3 target = canvasCamera.WorldToScreenPoint(coinTarget.transform.position);
            Vector3 start = canvasCamera.WorldToScreenPoint(coinFX.transform.position);
            Vector3 diff = target - start;
            float particleAngle = 90.0f - (float)((180.0f / Math.PI) * Math.Atan(diff.y / diff.x));

            ParticleSystem.ShapeModule particleShape = coinFX.shape;
            particleShape.rotation = new Vector3(0, particleAngle, 0);

            coinFX.gameObject.SetActive(true);

            yield return delay;

            coinFX.gameObject.SetActive(false);
            popupWindow.SetActive(false);

            CleanUpAction();
        }

        private void SetCoinParticles()
        {
            ParticleSystem.EmissionModule coinFxEmission = coinFX.emission;
            float f = 0.75f / (coinRewardCount / 5);
            coinFxEmission.SetBursts(new ParticleSystem.Burst[] { new ParticleSystem.Burst(0, 1, coinRewardCount / 2, f) });
            SceneActivationBehaviour<GameLogicActivator>.Instance.GameController.CoinsGrantedHandler(coinRewardCount, coinSourceType);
        }

        private void CleanUpAction()
        {
            rewardClaimed?.Invoke();
            rewardClaimed = null;
            InterfaceController.Instance.Hide(GameWindow.PopupRewardedVideo);
            Hide();
        }
    }
}