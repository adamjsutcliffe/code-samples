using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.QuixelLogic.Scripts.Common;
using Peak.QuixelLogic.Scripts.Autogenerated;
using JetBrains.Annotations;
using TMPro;

namespace Peak.QuixelLogic.Scripts.ScenesLogic
{
    public class SettingsMenuUIActivator : SceneActivationBehaviour<SettingsMenuUIActivator>
    {
        [SerializeField]
        private string feedbackUrlScheme;

        [SerializeField]
        private string feedbackSubject;

        [SerializeField, Multiline]
        private string feedbackBody;

        [SerializeField]
        private ButtonController sfxButton;

        [SerializeField]
        private ButtonController musicButton;

        [SerializeField]
        private ButtonController notificationButton;

        [SerializeField]
        private GameObject musicOffIcon;

        [SerializeField]
        private GameObject sfxOffIcon;

        [SerializeField]
        private GameObject notificationOffIcon;

        [SerializeField]
        private GameObject howToPlayWindow;

        [SerializeField]
        private GameObject creditsPanel;

        [SerializeField]
        private TextMeshProUGUI versionNumberText;

        public override void Initialize()
        {
            base.Initialize();
        }

        public override void Show()
        {
            base.Show();

            InterfaceController.Instance.Show(GameWindow.BoardBlur);

            musicOffIcon.SetActive(!SoundController.Instance.IsMusicEnabled);
            sfxOffIcon.SetActive(!SoundController.Instance.IsSoundEnabled);
            notificationOffIcon.SetActive(!NotificationController.Instance.notificationsOn);

            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(false);

            versionNumberText.text = Application.version.ToString();
        }

        public override void Hide()
        {
            base.Hide();
            SceneActivationBehaviour<UICoinCounterActivator>.Instance.SetButtons(true);
            InterfaceController.Instance.Hide(GameWindow.BoardBlur);
        }

        [UsedImplicitly]
        public void HowToPlayButtonHandler()
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);
            howToPlayWindow.SetActive(true);
        }

        [UsedImplicitly]
        public void ContactUsButtonHandler()
        {
            string url = string.Format(feedbackUrlScheme,
                WWW.EscapeURL(feedbackSubject).Replace("+", "%20"),
                WWW.EscapeURL("\n\n" + GameConstants.MainGame.ContactUsEmailTemplate + "\nVersion number: " + Application.version).Replace("+", "%20"));

            Application.OpenURL(url);
        }

        [UsedImplicitly]
        public void PrivacyPolicyButtonHandler()
        {
            Application.OpenURL("https://privacy.brainbowgames.com/");
        }

        [UsedImplicitly]
        public void CreditsButtonHandler()
        {
            SoundController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.Popupappear);
            creditsPanel.SetActive(true);
        }

        [UsedImplicitly]
        public void CloseCredits()
        {
            creditsPanel.SetActive(false);
        }

        [UsedImplicitly] // by Map/Settings button and Pause menu button
        public void ToggleMusic()
        {
            bool isEnabled = SoundController.Instance.ToggleMusic(true);
            musicOffIcon.SetActive(!isEnabled);
        }

        [UsedImplicitly] // by Map/Settings button and Pause menu button
        public void ToggleSfx()
        {
            bool isEnabled = SoundController.Instance.ToggleSfx(true);
            sfxOffIcon.SetActive(!isEnabled);
        }

        [UsedImplicitly] // by Map/Settings button and Pause menu button
        public void ToggleNotifications()
        {
            bool isEnabled = NotificationController.Instance.ToggleNotifications();

            notificationOffIcon.SetActive(!isEnabled);

            if (isEnabled)
            {
                StartCoroutine(NotificationController.Instance.AskForPermissionsCoroutine());
                //notificationButton.enabled = false;
            }
        }

        [UsedImplicitly] // by resume button
        public void ExitButtonHandler()
        {
            InterfaceController.Instance.Hide(GameWindow.SettingsMenuUI);
        }
    }
}
