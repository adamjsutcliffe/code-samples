using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using TMPro;
using System;

namespace Peak.Speedoku.Scripts.Common
{
    public class DeductionController : MonoBehaviour
    {
        [SerializeField] private TextMeshProUGUI deductionText;
        [SerializeField] private float animationDuration;
        [SerializeField] private int animationSteps;
        private int startValue;

        public void UpdateDeductionText(int value, bool animated = false)
        {
            if (animated)
            {
                startValue = 0;
                Int32.TryParse(deductionText.text, out startValue);
                StartCoroutine(animateText(startValue, value));
            }
            else
            {
                startValue = value;
                deductionText.text = $"{value}";
            }
        }

        private IEnumerator animateText(int start, int end)
        {
            int diff = end - start;
            if (diff > 2)
            {
                int increment = diff / animationSteps;
                float incrementTime = animationDuration / animationSteps;
                print($"Diff: {diff} increment: {increment} space: {incrementTime}");
                yield return new WaitForSeconds(0.2f);
                for (int i = 0; i < animationSteps; i++)
                {
                    LocalisationController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.ScoreAdded);
                    deductionText.text = $"{start += increment}";
#if PLATFORM_IOS
                    iOSHapticFeedbackHelper.OnSelection();
#endif
                    yield return new WaitForSeconds(incrementTime);
                }
            }
            else if (diff > 0)
            {
                LocalisationController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.ScoreAdded);
#if PLATFORM_IOS
                iOSHapticFeedbackHelper.OnSelection();
#endif
            }
            deductionText.text = $"{end}";
        }
    }
}
