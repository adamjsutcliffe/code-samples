using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System;
using Peak.Speedoku.Scripts.Common.Extensions;
using Peak.Speedoku.Scripts.Common;
using Peak.Speedoku.Scripts.Autogenerated;

namespace Peak.Speedoku.Scripts.ScenesLogic
{
    public class OverlayUISceneActivator : SceneActivationBehaviour<OverlayUISceneActivator>
    {
        [SerializeField]
        private Canvas clickCanvasRoot;

        [SerializeField]
        private Button fullScreenButton;

        public Button FullScreenButton => fullScreenButton;

        [SerializeField]
        private GameObject backgroundBlur;

        [Header("Overlay - FTUE")]
        [SerializeField]
        private GameObject gameplayMessageObject;

        [SerializeField]
        private TextMeshProUGUI gameplayMessageText;

        [SerializeField]
        private GameObject gameplayMessageHandTap;

        [SerializeField]
        private GameObject notificationMessageObject;

        [SerializeField]
        private TextMeshProUGUI notificationMessageText;

        [SerializeField] private GameObject ftueSkipButton;

        [Header("Overlay - Screen Transition")]
        [SerializeField] private Animator transitionAnimator;

        private List<GameObject> allVisibleObjects = new List<GameObject>();

        private Coroutine autoHideFtueCoroutine;

        public override void Initialize()
        {
            base.Initialize();

            allVisibleObjects.Add(fullScreenButton.gameObject);
            allVisibleObjects.Add(gameplayMessageObject);
        }

        public override void Show(bool animated = false)
        {
            base.Show(animated);
        }

        public override void Hide()
        {
            base.Hide();
        }

        public override void SetButtonsEnabled(bool isEnabled)
        {
            base.SetButtonsEnabled(isEnabled);
        }

        public void ShowFtueGameplayMessage(string message, int autoHideDelayInMs = 0, bool showTapHand = true)
        {
            gameplayMessageObject.SetActive(true);
            gameplayMessageHandTap.SetActive(showTapHand);
            gameplayMessageText.text = message;

            if (autoHideDelayInMs > 0)
            {
                if (autoHideFtueCoroutine != null)
                {
                    StopCoroutine(autoHideFtueCoroutine);
                }

                autoHideFtueCoroutine = StartCoroutine(AutoHideFtue(autoHideDelayInMs));
            }
        }

        public void AddTapHandToMessage()
        {
            gameplayMessageHandTap.SetActive(true);
        }

        public void ShowNotificationMessage(string message, int autoHideDelayInMs = 0)
        {
            notificationMessageObject.SetActive(true);
            notificationMessageText.text = message;

            if (autoHideDelayInMs > 0)
            {
                if (autoHideFtueCoroutine != null)
                {
                    StopCoroutine(autoHideFtueCoroutine);
                }

                autoHideFtueCoroutine = StartCoroutine(AutoHideFtue(autoHideDelayInMs));
            }
        }

        public void HideFtueMessages()
        {
            LocalisationController.Instance.PlayAudioClip(Settings.Autogenerated.SoundSettingsKey.PopupSound);
            gameplayMessageObject.SetActive(false);
            notificationMessageObject.SetActive(false);
        }

        private IEnumerator AutoHideFtue(int autoHideDelayInMs)
        {
            yield return new WaitForSeconds(autoHideDelayInMs / 1000f);
            HideFtueMessages();
        }

        public void SubscribeForFullScreenTap(Action handler)
        {
            clickCanvasRoot.gameObject.SetActive(true);
            FullScreenButton.SetInteractability(true);
            FullScreenButton.SetEnabled(true);

            FullScreenButton.onClick.RemoveAllListeners();
            FullScreenButton.onClick.AddListener(() =>
            {
                FullScreenButton.SetEnabled(false);
                clickCanvasRoot.gameObject.SetActive(false);

                handler?.Invoke();
            });
        }

        public void UnsubscribeFromFullScreenTap()
        {
            FullScreenButton.onClick.RemoveAllListeners();
            FullScreenButton.SetEnabled(false);
            clickCanvasRoot.gameObject.SetActive(false);
        }

        public void ShowFtueSkipButton(bool show)
        {
            ftueSkipButton.SetActive(show);
        }

        public void FtueSkipButtonHandler()
        {
            print("SKIP Popup");
            //ftueSkipButton.SetActive(true);
            InterfaceController.Instance.Show(GameWindow.SkipFtuePopup, true);
        }

        #region Screen transition

        private Action startCompletion;
        private Action endCompletion;

        public void StartScreenTransition(Action action)
        {
            startCompletion = action;
            transitionAnimator.SetTrigger(Constants.Animation.Overlay.StartTransition);
        }

        public void StartTransitionAnimationDone()
        {
            print("start animation done");
            startCompletion?.Invoke();
            startCompletion = null;
        }

        public void EndScreenTransition(Action action)
        {
            endCompletion = action;
            transitionAnimator.SetTrigger(Constants.Animation.Overlay.EndTransition);
        }

        public void EndTransitionAnimationDone()
        {
            print("End transition done");
            endCompletion?.Invoke();
            endCompletion = null;
        }

        #endregion
    }
}
