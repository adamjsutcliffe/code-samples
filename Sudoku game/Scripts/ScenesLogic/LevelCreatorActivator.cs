using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Peak.Speedoku.Scripts.Common;
using Peak.Speedoku.Scripts.Autogenerated;
using Peak.Speedoku.Scripts.Game.Gameplay;
using Peak.Speedoku.Scripts.Settings;
using Peak.Speedoku.Scripts.Game;
using UnityEngine.UI;
using UnityEditor;
using System.Linq;

namespace Peak.Speedoku.Scripts.ScenesLogic
{
    public class LevelCreatorActivator : SceneActivationBehaviour<LevelCreatorActivator>
    {
        [SerializeField] GameplayScript gameplay;
        [SerializeField] Image validationIcon;
        [SerializeField] Sprite validSprite;
        [SerializeField] Sprite invalidSprite;
        [SerializeField] Toggle mirrorToggle;
        [SerializeField] Toggle rotationToggle;
        [SerializeField] Toggle ftueToggle;

        public GameplayScript Gameplay => gameplay;

        private void Awake()
        {
            Show();
        }

        public override void Show(bool animated = false)
        {
            base.Show(animated);

            ResetBoard();
        }

        public void ValidateGrid()
        {
#if UNITY_EDITOR //ONLY RUN IN EDITOR!!!

            int[] targets = Gameplay.GameBoard.GridTargets();
            bool isValid = targets.Length == GridMaths.smallGrid;
            print($"Validate {isValid} Target check {targets.Length}");
            string problemString = Gameplay.GameBoard.GridString();
            print($"Validate grid - {problemString} targets: {string.Join(",", targets)}");
            bool normalCheck = CreateNewLevel(problemString, targets);

            bool normalMirrorCheck = true;
            string mirrorGrid = GridMaths.MirrorGrid(problemString);
            print($"mirror rotation {mirrorGrid}");
            int[] mirrorTargets = GridMaths.MirrorTargets(targets);
            if (mirrorToggle.isOn && !ftueToggle.isOn)
            {
                print($"mirror targets: {string.Join(",", mirrorTargets)}");
                normalMirrorCheck = CreateNewLevel(mirrorGrid, mirrorTargets);
            }
            if (normalCheck && normalMirrorCheck && !ftueToggle.isOn)
            {
                for (int i = 0; i < 3; i++)
                {
                    if (rotationToggle.isOn)
                    {
                        problemString = GridMaths.RotateGridNinety(problemString);
                        targets = GridMaths.RotateTargetsNinety(targets);
                        CreateNewLevel(problemString, targets);
                    }
                    if (mirrorToggle.isOn)
                    {
                        mirrorGrid = GridMaths.MirrorGrid(problemString);
                        mirrorTargets = GridMaths.MirrorTargets(targets);
                        CreateNewLevel(mirrorGrid, mirrorTargets);
                    }
                }
            }
            else
            {
                isValid = false;
            }
            

            //string ninetyRotation = GridMaths.RotateGridNinety(problemString);
            //print($"90 rotation {ninetyRotation}");
            //int[] ninetyTargets = GridMaths.RotateTargetsNinety(targets);
            //print($"90 targets: {string.Join(",", ninetyTargets)}");

            //string ninetyMirrorGrid = GridMaths.MirrorGrid(ninetyRotation);
            //print($"mirror rotation {ninetyMirrorGrid}");
            //int[] ninetyMirrorTargets = GridMaths.MirrorTargets(ninetyTargets);
            //print($"mirror targets: {string.Join(",", ninetyMirrorTargets)}");

            //string oneEightyRotation = GridMaths.RotateGridNinety(ninetyRotation);
            //print($"180 grid rotation {oneEightyRotation}");
            //int[] oneEightyTargets = GridMaths.RotateTargetsNinety(ninetyTargets);
            //print($"180 targets: {string.Join(",", ninetyTargets)}");

            //string mirrorGrid = GridMaths.MirrorGrid(ninetyRotation);
            //print($"mirror rotation {mirrorGrid}");
            //int[] oneEightyMirrorTargets = GridMaths.MirrorTargets(ninetyTargets);
            //print($"mirror targets: {string.Join(",", mirrorTargets)}");

            //string ninetyRotation = GridMaths.RotateGridNinety(ninetyRotation);
            //print($"270 grid rotation {ninetyRotation}");
            //int[] ninetyTargets = GridMaths.RotateTargetsNinety(ninetyTargets);
            //print($"270 targets: {string.Join(",", ninetyTargets)}");

            //string mirrorGrid = GridMaths.MirrorGrid(ninetyRotation);
            //print($"mirror rotation {mirrorGrid}");
            //int[] mirrorTargets = GridMaths.MirrorTargets(ninetyTargets);
            //print($"mirror targets: {string.Join(",", mirrorTargets)}");

            //string ninetyRotation = GridMaths.RotateGridNinety(ninetyRotation);
            //print($"back OG grid rotation {ninetyRotation}");
            //int[] ninetyTargets = GridMaths.RotateTargetsNinety(ninetyTargets);
            //print($"back og targets: {string.Join(",", ninetyTargets)}");

            //string mirrorGrid = GridMaths.MirrorGrid(ninetyRotation);
            //print($"mirror rotation {mirrorGrid}");
            //int[] mirrorTargets = GridMaths.MirrorTargets(ninetyTargets);
            //print($"mirror targets: {string.Join(",", mirrorTargets)}");

            //if (isValid)
            //{
            //    RuleSettings newRule = ScriptableObject.CreateInstance<RuleSettings>();
            //    newRule.Id = GUID.Generate().ToString();
            //    newRule.levelData = problemString;
            //    newRule.targetIndexes = targets;
            //    if (newRule.IsRuleValid())
            //    {
            //        AssetDatabase.CreateAsset(newRule, $"Assets/Speedoku/Settings/Levels/Level{newRule.Id}.asset");
            //        GlobalSettings settings = (GlobalSettings)AssetDatabase.LoadAssetAtPath("Assets/Speedoku/Settings/GlobalSettings.asset", typeof(GlobalSettings));
            //        settings.RulesList.Add(newRule);
            //        EditorUtility.SetDirty(settings);
            //        AssetDatabase.SaveAssets();
            //    }
            //    else
            //    {
            //        isValid = false;
            //    }
            //}

            validationIcon.sprite = isValid ? validSprite : invalidSprite;
#endif
        }

        private bool CreateNewLevel(string problemString, int[] targets)
        {
#if UNITY_EDITOR
            RuleSettings newRule = ScriptableObject.CreateInstance<RuleSettings>();
            newRule.Id = GUID.Generate().ToString();
            newRule.levelData = problemString;
            newRule.targetIndexes = targets;
            newRule.IsFtueGame = ftueToggle.isOn;
            if (newRule.IsRuleValid())
            {
                string ftuePrefix = newRule.IsFtueGame ? "FTUE" : "";
                AssetDatabase.CreateAsset(newRule, $"Assets/Speedoku/Settings/Levels/Level{ftuePrefix}{newRule.Id}.asset");
                if (!newRule.IsFtueGame)
                {
                    GlobalSettings settings = (GlobalSettings)AssetDatabase.LoadAssetAtPath("Assets/Speedoku/Settings/GlobalSettings.asset", typeof(GlobalSettings));
                    settings.RulesList.Add(newRule);
                    EditorUtility.SetDirty(settings);
                }
                AssetDatabase.SaveAssets();
                return true;
            }
#endif

            return false;
        }

        public void ResetBoard()
        {
            validationIcon.sprite = null;
            RuleSettings rules = ScriptableObject.CreateInstance<RuleSettings>();
            rules.levelData = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            rules.targetIndexes = new int[] { };
            MainGameData data = new MainGameData
            {
                Ruleset = rules
            };
            gameplay.ConfigureCreator(data);
        }
    }
}
